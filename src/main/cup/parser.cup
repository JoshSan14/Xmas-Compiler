package ParserLexer;
import java_cup.runtime.*;
import SymbolTable.*;
import Utils.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;

action code {:
    public void hola() {
        System.out.println("hola");
    }
    public void adios() {
        System.out.println("adios");
    }

    private SymbolTableManager symTabMgr = new SymbolTableManager();
    private Map<String, TabSymbol> symbols = new HashMap<String, TabSymbol>();
:}

parser code {:
    // Connect this parser to a scanner!
    lexer lex;

    @SuppressWarnings("deprecation")
    public parser(lexer lex){
        this.lex=lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

    public final String ANSI_RESET = "\u001B[0m";
    public final String ANSI_RED = "\u001B[31m";

    // Metodo para reportar los errores sintacticos, pero funciona con ayuda de Recuperación en Modo Pánico + producciones de la gramatica
    public void syntax_error(Symbol s){
        System.out.println(Utils.ANSI_RED + "syntax_error: Error sintáctico '"+ s.value + "' en la línea: " + s.left + ", columna: " + s.right + Utils.ANSI_RESET);
    }

    // Metodo para reportar los errores irreparables
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println(Utils.ANSI_RED + "unrecovered_syntax_error: Error sintáctico inrecuperable '"+ s.value + "' en la línea: "+ s.left + ", columna: " + s.right + Utils.ANSI_RESET);
    }

:};

/* define how to connect to the scanner! */
init with {: :};
scan with {: return lex.next_token(); :};

/* Terminales (tokens retornados por el scanner). */
// Lexema Separador ( , )
terminal PINO;
// Operadores Aritméticos Binarios ( +, -, *, /, %, ** ):
terminal DASHER, DANCER, PRANCER, VIXEN, COMET, RUDOLPH;
// Operadores Aritméticos Unarios ( ++, -- ):
terminal GRINCH, QUIEN;
// Operadores Relacionales ( ==, !=, >, <, =<, =< ):
terminal ALABASTER, BUSHY, PEPPER, SUGARPLUM, WUNORSE, JINGLE;
// Operadores Logicos ( ^, #, ! ):
terminal MELCHOR, GASPAR, BALTAZAR;
// Tipos de Datos ( char, int, float, boolean, string ):
terminal SANTACLAUS, FATHERCHRISTMAS, KRISKRINGLE, SANNICOLAS, DEDMOROZ;
// Literales
terminal L_SANTACLAUS; // Nuestro scanner provee l_SANTACLAUS como char
terminal L_FATHERCHRISTMAS; // Nuestro scanner provee l_SANTACLAUS como int
terminal L_KRISKRINGLE; // Nuestro scanner provee l_SANTACLAUS como float
terminal L_SANNICOLAS; // Nuestro scanner provee l_SANTACLAUS como boolean
terminal L_DEDMOROZ; // Nuestro scanner provee l_SANTACLAUS como String
// Parentesis ( (, ), [, ], {, } ):
terminal ABRECUENTO, CIERRACUENTO, ABREEMPAQUE, CIERRAEMPAQUE, ABREREGALO, CIERRAREGALO;
// Lexemas de Estructuras de Control ( if, elif, else, for, do, until, return, break ):
terminal ELFO, HADA, DUENDE, ENVUELVE, HACE, REVISA, ENVIA, CORTA;
// Lexemas de Lectura/Escritura ( print, read ):
terminal NARRA, ESCUCHA;
// Lexema de Fin de Expresión ( | ):
terminal FINREGALO;
// Lexema de Asignación ( <= ):
terminal ENTREGA;
// Identificador ( variable, función ):
terminal PERSONA;
// EXTRA:
terminal LOCAL;
terminal FUNCTION;

// No terminales
nonterminal navidad; //Inicial
nonterminal caja; // Bloque de código
nonterminal personajedenavidad, arr_type; //Tipos y tipos de arreglo
nonterminal confites, sacoderegalos, portal, listadedeseos; // Declaraciones
nonterminal trajesdesanta, lucesdenavidad; // Parámetros
nonterminal barbadesanta, regalo; // Variables y arreglos inicializados
nonterminal celebracionesnavidenas, jueguetes, frio, nieve, carta, contarhistorianavidena, nochebuena, amigosecreto; // Declaraciones
nonterminal villancicos; //Lista de declaraciones
nonterminal observarregalos, peliculanavidena; // Estructuras de control
nonterminal papelderegalo;
nonterminal familia, regalomanual;
nonterminal leercarta, escribircarta;
nonterminal tamales, trineo; // Expresiones
nonterminal regaloprin, alegria, galletas, dulces;
nonterminal juegos, jueguetenuevo;
nonterminal sobre, campanas;
nonterminal estrella;
nonterminal juguetesenelarbol, regalocomprado;
nonterminal cenafamiliar;
nonterminal romperregalo, tiendadejuguetes; // Mutable o inmutable
nonterminal devolverregalo; // Llamada a función
nonterminal pelotasarbol, hojasarbol; // Argumentos
nonterminal adornos ; // Literales
nonterminal bolasdenavidad, bolsanavidena, identifier, carrito, decoracionnavidena;
start with navidad;

/**********************************************************************************************************************/

navidad ::= sacoderegalos {: symTabMgr.printAllTables(); :};

sacoderegalos ::= confites
                 | confites sacoderegalos {: :};

confites ::= FUNCTION identifier:id ABRECUENTO trajesdesanta CIERRACUENTO caja {:
                         RESULT = "function::" + (String)id;
                         Utils.splitAddFunc((String)RESULT, symbols, symTabMgr); :};

identifier ::= bolasdenavidad:id {: RESULT = (String)id; :}
             | bolsanavidena:id {: RESULT = (String)id; :};

personajedenavidad ::= FATHERCHRISTMAS: t_int {: RESULT = (String)t_int; :}
       | KRISKRINGLE: t_flt {: RESULT = (String)t_flt; :}
       | SANTACLAUS: t_char {: RESULT = (String)t_char; :}
       | DEDMOROZ: t_str {: RESULT = (String)t_str; :}
       | SANNICOLAS: t_bool {: RESULT = (String)t_bool; :};

bolasdenavidad ::= personajedenavidad:tp PERSONA:id {: RESULT = (String)tp + "::" + (String)id; :};

bolsanavidena ::= bolasdenavidad:id ABREEMPAQUE CIERRAEMPAQUE {: RESULT = (String)id + "::UND" ;  :}
         | bolasdenavidad:id ABREEMPAQUE tamales:size CIERRAEMPAQUE {: RESULT = (String)id + "::" + (String)size; :};

trajesdesanta ::= lucesdenavidad:par {: RESULT = (String)par; :}
             | lucesdenavidad:par PINO trajesdesanta:par_l {: RESULT = (String)par + ", " + (String)par_l; :}
             | {: RESULT = ""; :};

lucesdenavidad ::= identifier:id {: RESULT = "parameter::" + (String)id;
                           Utils.splitAddSym((String)RESULT, symbols); :};

caja ::= ABREREGALO villancicos CIERRAREGALO
        | error;

jueguetes ::= barbadesanta:var FINREGALO {: RESULT = "variable::" + (String)var;
                                             Utils.splitAddSym((String)RESULT, symbols); :}
            | regalo:arr FINREGALO {: RESULT = "array::" + (String)arr;
                                             Utils.splitAddArray((String)RESULT, symbols); :};

barbadesanta ::= carrito:var {: RESULT = (String)var; :}
                | portal:var {: RESULT = (String)var; :};

carrito ::= portal:var ENTREGA tamales:tamales {: RESULT = (String)var + "::" + (String)tamales; :};

portal ::= LOCAL bolasdenavidad:id {: RESULT = (String)id; :};

regalo ::= decoracionnavidena:arr {: RESULT = (String)arr; :}
                | listadedeseos:arr {: RESULT = (String)arr; :};

decoracionnavidena ::= listadedeseos:id ENTREGA ABREEMPAQUE trineo:expr_l CIERRAEMPAQUE {: RESULT = (String)id + "::[" +(String)expr_l + "]"; :};

listadedeseos ::= LOCAL bolsanavidena:id {: RESULT = (String)id; :};

trineo ::= tamales:tamales {: RESULT = (String)tamales; :}
            | tamales:tamales PINO trineo:expr_l {: RESULT = (String)tamales + ", " + (String)expr_l; :};

/**********************************************************************************************************************/

celebracionesnavidenas ::= jueguetes
       | frio
       | nieve
       | carta
       | contarhistorianavidena
       | nochebuena
       | amigosecreto;

villancicos ::= celebracionesnavidenas villancicos
            | ;

frio ::= tamales:tamales FINREGALO {: RESULT = tamales; :}
            | FINREGALO;

nieve ::= romperregalo:mut ENTREGA tamales:tamales FINREGALO {: RESULT = (String)mut + "<=" + (String)tamales ; :};

carta ::= observarregalos
                   | peliculanavidena;

observarregalos ::= ELFO ABRECUENTO tamales CIERRACUENTO caja papelderegalo;

papelderegalo ::= HADA ABRECUENTO tamales CIERRACUENTO caja papelderegalo
            | DUENDE caja
            | ;

peliculanavidena ::= familia
            | regalomanual;

familia ::= HACE caja REVISA ABRECUENTO tamales CIERRACUENTO FINREGALO;

regalomanual ::= ENVUELVE ABRECUENTO carrito FINREGALO tamales FINREGALO tamales CIERRACUENTO caja
           | ENVUELVE ABRECUENTO nieve tamales FINREGALO tamales CIERRACUENTO caja;

contarhistorianavidena ::= leercarta:celebracionesnavidenas FINREGALO {: RESULT = celebracionesnavidenas; :}
                    | escribircarta:celebracionesnavidenas FINREGALO {: RESULT = celebracionesnavidenas; :};

escribircarta ::= ESCUCHA:wrt ABRECUENTO PERSONA:id CIERRACUENTO {: RESULT = (String)wrt + "(" + (String)id + ")"; :};

leercarta ::= NARRA:prnt ABRECUENTO tamales:tamales CIERRACUENTO {: RESULT = (String)prnt + "(" + (String)tamales + ")"; :};

nochebuena ::= ENVIA:rtrn frio:frio {: RESULT = (String)rtrn + (String)frio; :};

amigosecreto ::= CORTA:brk FINREGALO {: RESULT = (String)brk; :};

tamales ::= regaloprin:an_expr GASPAR:sym tamales:tamales {: RESULT = (String)an_expr + (String)sym + (String)tamales; :}
       | regaloprin:an_expr {: RESULT = (String)an_expr; :};

regaloprin ::= alegria:no_expr MELCHOR:sym regaloprin:an_expr {: RESULT = (String)no_expr + (String)sym + (String)an_expr; :}
           | alegria:no_expr {: RESULT = (String)no_expr; :};

alegria ::= BALTAZAR:sym galletas:re_expr {: RESULT = (String)sym + (String)re_expr; :}
           | galletas: re_expr {: RESULT = (String)re_expr; :};

galletas ::= juegos:as_expr dulces:sym galletas:re_expr {: RESULT = (String)as_expr + (String)sym + (String)re_expr; :}
           | juegos:as_expr {: RESULT = (String)as_expr; :} ;

dulces ::= ALABASTER:sym {: RESULT = (String)sym; :}
         | BUSHY:sym {: RESULT = (String)sym; :}
         | PEPPER:sym {: RESULT = (String)sym; :}
         | SUGARPLUM:sym {: RESULT = (String)sym; :}
         | WUNORSE:sym {: RESULT = (String)sym; :}
         | JINGLE:sym {: RESULT = (String)sym; :};

juegos ::= sobre:md_expr jueguetenuevo:sym juegos:as_expr {: RESULT = (String)md_expr + (String)sym + (String)as_expr; :}
               | sobre:md_expr {: RESULT = (String)md_expr; :};

jueguetenuevo ::= DASHER:sym {: RESULT = (String)sym; :}
              | DANCER:sym {: RESULT = (String)sym; :};


sobre ::= estrella:ex_expr campanas:sym sobre:md_expr {: RESULT = (String)ex_expr + (String)sym + (String)md_expr; :}
               | estrella:ex_expr {: RESULT = (String)ex_expr; :};

campanas ::= PRANCER:sym {: RESULT = (String)sym; :}
              | VIXEN:sym {: RESULT = (String)sym; :}
              | COMET:sym {: RESULT = (String)sym; :};

estrella ::= juguetesenelarbol:un_expr RUDOLPH:sym estrella:ex_expr {: RESULT = (String)un_expr + (String)sym + (String)ex_expr; :}
           | juguetesenelarbol:un_expr {: RESULT = (String)un_expr; :};

juguetesenelarbol ::= regalocomprado:sym juguetesenelarbol:un_exp {: RESULT = (String)sym + (String)un_exp; :}
                | cenafamiliar:fact {: RESULT = (String)fact; :};

regalocomprado ::= GRINCH:sym {: RESULT = (String)sym; :}
               | QUIEN:sym {: RESULT = (String)sym; :};

cenafamiliar ::= tiendadejuguetes:immut {: RESULT = (String)immut; :}
         | romperregalo:mut {: RESULT = (String)mut; :};

romperregalo ::= PERSONA:id {: RESULT = "id=" + (String)id; :}
          | PERSONA:id ABREEMPAQUE tamales:tamales CIERRAEMPAQUE {: RESULT = "id=" + (String)id + "[" + (String)tamales + "]" ; :};

tiendadejuguetes ::= ABRECUENTO tamales:tamales CIERRACUENTO {: RESULT = "(" + (String)tamales + ")"; :}
            | devolverregalo:devolverregalo {: RESULT = (String)devolverregalo; :}
            | adornos :lit {: RESULT = (String)lit; :};

devolverregalo ::= PERSONA:id ABRECUENTO pelotasarbol:pelotasarbol CIERRACUENTO {: RESULT = (String)id + "(" + (String)pelotasarbol + ")"; :};

pelotasarbol ::= hojasarbol:arg_l {: RESULT = (String)arg_l; :}
       | {: RESULT = ""; :};

hojasarbol ::= tamales:tamales PINO hojasarbol:arg_l {: RESULT = (String)tamales + ", " + (String)arg_l; :}
           | tamales:tamales {: RESULT = (String)tamales;:};

adornos  ::= L_SANTACLAUS: l_char {: RESULT = "char=" + (String)l_char; :}
          | L_FATHERCHRISTMAS: l_int {: RESULT = "int=" + (String)l_int; :}
          | L_KRISKRINGLE: l_flt {: RESULT = "float=" + (String)l_flt; :}
          | L_SANNICOLAS: l_bool {: RESULT = "bool=" + (String)l_bool; :}
          | L_DEDMOROZ: l_str {: RESULT = "string=" + (String)l_str; :};