package ParserLexer;
import java_cup.runtime.*;
import SymbolTable.*;
import Utils.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import Semantic.*;

action code {:
    private SymbolTableManager symTabMgr = new SymbolTableManager();
    private Map<String, TabSymbol> symbols = new HashMap<String, TabSymbol>();
    private ArrayList<String> parameters = new ArrayList<String>();
    private ArrayList<String> symList = new ArrayList<String>();
:}

parser code {:
    // Connect this parser to a scanner!
    lexer lex;

    @SuppressWarnings("deprecation")
    public parser(lexer lex){
        this.lex=lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

    int paramCount = 1;

    public final String ANSI_RESET = "\u001B[0m";
    public final String ANSI_RED = "\u001B[31m";

    // Metodo para reportar los errores sintacticos, pero funciona con ayuda de Recuperación en Modo Pánico + producciones de la gramatica
    public void syntax_error(Symbol s){
        System.out.println(Utils.ANSI_RED + "syntax_error: Error sintáctico '"+ s.value + "' en la línea: " + s.left + ", columna: " + s.right + Utils.ANSI_RESET);
    }

    // Metodo para reportar los errores irreparables
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println(Utils.ANSI_RED + "unrecovered_syntax_error: Error sintáctico inrecuperable '"+ s.value + "' en la línea: "+ s.left + ", columna: " + s.right + Utils.ANSI_RESET);
    }

:};

/* define how to connect to the scanner! */
init with {: :};
scan with {: return lex.next_token(); :};

/* Terminales (tokens retornados por el scanner). */
// Lexema Separador ( , )
terminal PINO;
// Operadores Aritméticos Binarios ( +, -, *, /, %, ** ):
terminal DASHER, DANCER, PRANCER, VIXEN, COMET, RUDOLPH;
// Operadores Aritméticos Unarios ( ++, -- ):
terminal GRINCH, QUIEN;
// Operadores Relacionales ( ==, !=, >, <, =<, =< ):
terminal ALABASTER, BUSHY, PEPPER, SUGARPLUM, WUNORSE, JINGLE;
// Operadores Logicos ( ^, #, ! ):
terminal MELCHOR, GASPAR, BALTAZAR;
// Tipos de Datos ( char, int, float, boolean, string ):
terminal SANTACLAUS, FATHERCHRISTMAS, KRISKRINGLE, SANNICOLAS, DEDMOROZ;
// Literales
terminal L_SANTACLAUS; // Nuestro scanner provee l_SANTACLAUS como char
terminal L_FATHERCHRISTMAS; // Nuestro scanner provee l_SANTACLAUS como int
terminal L_KRISKRINGLE; // Nuestro scanner provee l_SANTACLAUS como float
terminal L_SANNICOLAS; // Nuestro scanner provee l_SANTACLAUS como boolean
terminal L_DEDMOROZ; // Nuestro scanner provee l_SANTACLAUS como String
// Parentesis ( (, ), [, ], {, } ):
terminal ABRECUENTO, CIERRACUENTO, ABREEMPAQUE, CIERRAEMPAQUE, ABREREGALO, CIERRAREGALO;
// Lexemas de Estructuras de Control ( if, elif, else, for, do, until, return, break ):
terminal ELFO, HADA, DUENDE, ENVUELVE, HACE, REVISA, ENVIA, CORTA;
// Lexemas de Lectura/Escritura ( print, read ):
terminal NARRA, ESCUCHA;
// Lexema de Fin de Expresión ( | ):
terminal FINREGALO;
// Lexema de Asignación ( <= ):
terminal ENTREGA;
// Identificador ( variable, función ):
terminal PERSONA;
// EXTRA:
terminal LOCAL;
terminal FUNCTION;

// No terminales
nonterminal navidad; // No terminal inicial
nonterminal caja; // Bloque de código
nonterminal personajedenavidad, arr_type; // Tipos y tipos de arreglo
nonterminal confites, sacoderegalos, portal, listadedeseos; // Declaraciones
nonterminal trajesdesanta, lucesdenavidad; // Parámetros
nonterminal barbadesanta, regalo; // Variables y arreglos inicializados
nonterminal celebracionesnavidenas, jueguetes, frio, nieve, carta, contarhistorianavidena, nochebuena, amigosecreto; // Sentencias
nonterminal villancicos; // Lista de sentencias
nonterminal observarregalos, peliculanavidena; // Estructuras de control
nonterminal papelderegalo; // Alternativa (else if / else)
nonterminal familia, regalomanual; // Ciclos
nonterminal leercarta, escribircarta; // Sentencias de entrada y salida
nonterminal tamales, trineo; // Expresiones
nonterminal regaloprin, alegria, galletas, dulces; // Expresiones booleanas y relaciones
nonterminal juegos, jueguetenuevo; // Suma y resta
nonterminal sobre, campanas; // Multiplicación y división
nonterminal estrella; // Exponente
nonterminal juguetesenelarbol, regalocomprado; // Operadores unarios
nonterminal cenafamiliar; // Factor en una expresión
nonterminal romperregalo, tiendadejuguetes; // Mutable o inmutable
nonterminal devolverregalo; // Llamada a función
nonterminal pelotasarbol, hojasarbol; // Argumentos
nonterminal adornos; // Literales
nonterminal bolasdenavidad, bolsanavidena, identifier, carrito, decoracionnavidena; // Identificadores y inicializadores
start with navidad; // No terminal de inicio

/**********************************************************************************************************************/
// Simbolo inicial
navidad ::= sacoderegalos {: symTabMgr.printAllTables(); :};
// Producciones para lista de declaraciones de funciones (sacoderegalos)
sacoderegalos ::= confites
                 | confites sacoderegalos {: :};
// Producción para declaración de una función (confites)
confites ::= FUNCTION identifier:id ABRECUENTO trajesdesanta CIERRACUENTO caja:caja {:
                         paramCount = 1;
                         RESULT = "function::" + (String)id + "::" + (String)caja;
                         symList = Utils.splitMessage((String)RESULT, "::");
                         BlockTree.processFuncBlock(symList.get(3), symList.get(2), symList.get(1), symbols, symTabMgr);
                         Utils.splitAddFunc((String)RESULT, symbols, symTabMgr, new ArrayList<String>(parameters));
                         parameters.clear();:};
// Producciones para identificador (identifier)
identifier ::= bolasdenavidad:id {: RESULT = (String)id; :}
             | bolsanavidena:id {: RESULT = (String)id; :};
// Producciones para tipo de dato (personajedenavidad)
personajedenavidad ::= FATHERCHRISTMAS: t_int {: RESULT = (String)t_int; :}
       | KRISKRINGLE: t_flt {: RESULT = (String)t_flt; :}
       | SANTACLAUS: t_char {: RESULT = (String)t_char; :}
       | DEDMOROZ: t_str {: RESULT = (String)t_str; :}
       | SANNICOLAS: t_bool {: RESULT = (String)t_bool; :};
// Producción para identificador generalizado (bolasdenavidad)
bolasdenavidad ::= personajedenavidad:tp PERSONA:id {: RESULT = (String)tp + "::" + (String)id; :};
// Producción para identificador de arreglo (bolsanavidena)
bolsanavidena ::= bolasdenavidad:id ABREEMPAQUE CIERRAEMPAQUE {: RESULT = (String)id + "::UND" ;  :}
         | bolasdenavidad:id ABREEMPAQUE tamales:size CIERRAEMPAQUE {: RESULT = (String)id + "::" + (String)size; :};
// Producciones para lista de parámetros (trajesdesanta)
trajesdesanta ::= lucesdenavidad:par {: RESULT = (String)par; :}
             | lucesdenavidad:par PINO trajesdesanta:par_l {: RESULT = (String)par + ", " + (String)par_l; :}
             | {: RESULT = ""; :};
// Producción para parámetro (lucesdenavidad)
lucesdenavidad ::= identifier:id {: RESULT = "parameter::" + (String)id + "::" + paramCount;
                           paramCount++;
                           ArrayList<String> params = Utils.splitMessage((String)RESULT,"::");
                           parameters.add(params.get(1));
                           Utils.splitAddSym((String)RESULT, symbols); :};
// Producción para bloque de código (caja)
caja ::= ABREREGALO villancicos:stmt_l CIERRAREGALO {: RESULT = "<BLOCK>" + (String)stmt_l + "</BLOCK>"; :}
        | error;
// Producción para inicialización de variable (jueguetes)
jueguetes ::= barbadesanta:var FINREGALO {: RESULT = "variable::" + (String)var;
                                             Utils.splitAddSym((String)RESULT, symbols); :}
            | regalo:arr FINREGALO {: RESULT = "array::" + (String)arr;
                                             Utils.splitAddSym((String)RESULT, symbols); :};
// Producciones para inicialización de variable (barbadesanta)
barbadesanta ::= carrito:var {: RESULT = (String)var; :}
                | portal:var {: RESULT = (String)var; :};
// Producción para inicialización de variable (carrito)
carrito ::= portal:var ENTREGA tamales:tamales {:
RESULT = (String)var + "::" + (String)tamales;
symList = Utils.splitMessage((String)RESULT, "::");
ExpressionTree.checkExpressionType((String)tamales, symList.get(0), symbols, symTabMgr);
:};
// Producción para declaración de variable local (portal)
portal ::= LOCAL bolasdenavidad:id {: RESULT = (String)id; :};
// Producciones para inicialización/declaración de arreglo (regalo)
regalo ::= decoracionnavidena:arr {: RESULT = (String)arr; :}
                | listadedeseos:arr {: RESULT = (String)arr; :};
// Producción para inicialización de arreglo (decoracionnavidena)
decoracionnavidena ::= listadedeseos:id ENTREGA ABREEMPAQUE trineo:expr_l CIERRAEMPAQUE {:
RESULT = (String)id + "::<ARRAY>" +(String)expr_l + "</ARRAY>";
symList = Utils.splitMessage((String)RESULT, "::");
ExpressionTree.checkExpressionType(symList.get(3), symList.get(0), symbols, symTabMgr);
:};
// Producción para declaración de arreglo local (listadedeseos)
listadedeseos ::= LOCAL bolsanavidena:id {: RESULT = (String)id; :};
// Producción para lista de expresiones (trineo)
trineo ::= tamales:tamales {: RESULT = "<EXPR>" + (String)tamales + "</EXPR>";:}
            | tamales:tamales PINO trineo:expr_l {: RESULT = "<EXPR>" + (String)tamales + "</EXPR>" + (String)expr_l;:};
/**********************************************************************************************************************/
// Producciones para las sentencias (celebracionesnavidenas)
celebracionesnavidenas ::= jueguetes {: RESULT = "<INIT></INIT>";:}
       | frio {: RESULT = "<EXPR_S><EXPR_S>"; :}
       | nieve:assg {:
       RESULT = "<ASSG>" + (String)assg + "</ASSG>";
       System.out.println(RESULT);
       BlockTree.processAssign((String)RESULT, symbols, symTabMgr);
       :}
       | carta {: RESULT = "<CTRL></CTRL>"; :}
       | contarhistorianavidena {: RESULT = "<IO></IO>"; :}
       | nochebuena:rtrn {: RESULT = "<RETURN>" + (String)rtrn + "</RETURN>"; :}
       | amigosecreto:brk {:RESULT = "<BREAK></BREAK>"; :};
// Producciones para listas de sentencias (villancicos)
villancicos ::= celebracionesnavidenas:celebracionesnavidenas villancicos:stmt_l {: RESULT = (String)celebracionesnavidenas + (String)stmt_l ; :}
            | ;
// Producción para las sentencias de expresiones (frio)
frio ::= tamales:tamales FINREGALO {: RESULT = (String)tamales; :}
            | FINREGALO;
// Producción para las sentencias de asignación (nieve)
nieve ::= romperregalo:mut ENTREGA tamales:tamales FINREGALO {:RESULT = (String)mut + "<EXPR>" + (String)tamales + "</EXPR>";:};
// Producción para las estructuras de control (carta)
carta ::= observarregalos
                   | peliculanavidena;
// Producción para las sentencias condicionales (observarregalos)
observarregalos ::= ELFO ABRECUENTO tamales CIERRACUENTO caja papelderegalo;
// Producción para las cláusulas elif y else (papelderegalo)
papelderegalo ::= HADA ABRECUENTO tamales CIERRACUENTO caja papelderegalo
            | DUENDE caja
            | ;
// Producción para las instrucciones de iteración (peliculanavidena)
peliculanavidena ::= familia
            | regalomanual;
// Producción para las sentencias de bucle do-until (familia)
familia ::= HACE caja REVISA ABRECUENTO tamales CIERRACUENTO FINREGALO;
// Producción para las sentencias de bucle for (regalomanual)
regalomanual ::= ENVUELVE ABRECUENTO carrito FINREGALO tamales FINREGALO tamales CIERRACUENTO caja
           | ENVUELVE ABRECUENTO nieve tamales FINREGALO tamales CIERRACUENTO caja;
// Producción para las sentencias de entrada y salida (contarhistorianavidena)
contarhistorianavidena ::= leercarta:celebracionesnavidenas FINREGALO {: RESULT = celebracionesnavidenas; :}
                    | escribircarta:celebracionesnavidenas FINREGALO {: RESULT = celebracionesnavidenas; :};
// Producción para las sentencias de escritura (escribircarta)
escribircarta ::= ESCUCHA:wrt ABRECUENTO PERSONA:id CIERRACUENTO {: RESULT = (String)wrt + "(" + (String)id + ")"; :};
// Producción para las sentencias de lectura (leercarta)
leercarta ::= NARRA:prnt ABRECUENTO tamales:tamales CIERRACUENTO {: RESULT = (String)prnt + "(" + (String)tamales + ")"; :};
// Producción para las sentencias de retorno (nochebuena)
nochebuena ::= ENVIA:rtrn frio:frio {: RESULT = (String)frio; :};
// Producción para las sentencias de ruptura (amigosecreto)
amigosecreto ::= CORTA:brk FINREGALO {: RESULT = (String)brk; :};
// Producción para expresiones lógicas (tamales)
tamales ::= regaloprin:an_expr GASPAR:sym tamales:tamales {: RESULT = "<LOGIC><OP1>" + (String)an_expr + "</OP1><SYM>" +(String)sym + "</SYM><OP2>" + (String)tamales + "</OP2></LOGIC>";  :}
       | regaloprin:an_expr {: RESULT = (String)an_expr ;  :};
// Producción para expresiones lógicas AND (regaloprin)
regaloprin ::= alegria:no_expr MELCHOR:sym regaloprin:an_expr {: RESULT = "<LOGIC><OP1>" + (String)no_expr + "</OP1><SYM>"+ (String)sym + "</SYM><OP2>" + (String)an_expr + "</OP2></LOGIC>"; :}
           | alegria:no_expr {: RESULT = (String)no_expr; :};
// Producción para expresiones lógicas NOT (alegria)
alegria ::= BALTAZAR:sym galletas:re_expr {: RESULT = "<LOGIC><SYM>" + (String)sym + "</SYM><OP1>" +(String)re_expr + "</OP1></LOGIC>"; :}
           | galletas: re_expr {: RESULT = (String)re_expr; :};
// Producción para expresiones relacionales (galletas)
galletas ::= juegos:as_expr dulces:sym galletas:re_expr {: RESULT = "<REL><OP1>" + (String)as_expr + "</OP1><SYM>" + (String)sym + "</SYM><OP2>" + (String)re_expr + "</OP2></REL>"; :}
           | juegos:as_expr {: RESULT =  (String)as_expr ; :} ;
// Producción para operadores relacionales (dulces)
dulces ::= ALABASTER:sym {: RESULT = "eq"; :}
         | BUSHY:sym {: RESULT = "ne"; :}
         | PEPPER:sym {: RESULT = "l"; :}
         | SUGARPLUM:sym {: RESULT = "g"; :}
         | WUNORSE:sym {: RESULT = "le"; :}
         | JINGLE:sym {: RESULT = "ge"; :};
// Producción para expresiones aritméticas de suma y resta (juegos)
juegos ::= sobre:md_expr jueguetenuevo:sym juegos:as_expr {: RESULT = "<ARITH><OP1>" + (String)md_expr + "</OP1><SYM>"+ (String)sym + "</SYM><OP2>" + (String)as_expr + "</OP2></ARITH>";
                                                                            //Semantic.semanticExpr(symTabMgr, symbols, (String)RESULT, "int");
:}
               | sobre:md_expr {: RESULT = (String)md_expr; :};
// Producción para operadores de suma y resta (jueguetenuevo)
jueguetenuevo ::= DASHER:sym {: RESULT = (String)sym; :}
              | DANCER:sym {: RESULT = (String)sym; :};
// Producción para expresiones aritméticas de multiplicación y división (sobre)
sobre ::= estrella:ex_expr campanas:sym sobre:md_expr {: RESULT = "<ARITH><OP1>" + (String)ex_expr + "</OP1><SYM>" + (String)sym + "</SYM><OP2>" + (String)md_expr + "</OP2></ARITH>"; :}
               | estrella:ex_expr {: RESULT = (String)ex_expr; :};
// Producción para operadores de multiplicación y división (campanas)
campanas ::= PRANCER:sym {: RESULT = (String)sym; :}
              | VIXEN:sym {: RESULT = (String)sym; :}
              | COMET:sym {: RESULT = (String)sym; :};
// Producción para expresiones aritméticas de exponenciación (estrella)
estrella ::= juguetesenelarbol:un_expr RUDOLPH:sym estrella:ex_expr {: RESULT = "<ARITH><OP1>" +(String)un_expr + "</OP1><SYM>" + (String)sym + "</SYM><OP2><<" + (String)ex_expr + "</OP2></ARITH>"; :}
           | juguetesenelarbol:un_expr {: RESULT = (String)un_expr; :};
// Producción para expresiones unarias (juguetesenelarbol)
juguetesenelarbol ::= regalocomprado:sym juguetesenelarbol:un_exp {: RESULT = "<ARITH><SYM>" + (String)sym + "</SYM><OP1>" + (String)un_exp + "</OP1></ARITH>"; :}
                | cenafamiliar:fact {: RESULT = (String)fact; :};
// Producción para operadores unarios (regalocomprado)
regalocomprado ::= GRINCH:sym {: RESULT = (String)sym; :}
               | QUIEN:sym {: RESULT = (String)sym; :};
// Producción para factores (cenafamiliar)
cenafamiliar ::= tiendadejuguetes:immut {: RESULT = (String)immut; :}
         | romperregalo:mut {: RESULT = (String)mut; :};
// Producción para variables (romperregalo)
romperregalo ::= PERSONA:id {: RESULT = "<ID>" + (String)id + "</ID>"; :}
          | PERSONA:id ABREEMPAQUE tamales:tamales CIERRAEMPAQUE {: RESULT = "<ARR_ELEM><ID>" + (String)id + "</ID><EXPR>" + (String)tamales + "</EXPR></ARR_ELEM>" ; :};
// Producción para constantes (tiendadejuguetes)
tiendadejuguetes ::= ABRECUENTO tamales:tamales CIERRACUENTO {: RESULT = tamales; :}
            | devolverregalo:devolverregalo {: RESULT = "<CALL>" + (String)devolverregalo + "</CALL>"; :}
            | adornos:lit {: RESULT = "<LITERAL>" + (String)lit + "</LITERAL>"; :};
// Producción para llamadas a funciones (devolverregalo)
devolverregalo ::= PERSONA:id ABRECUENTO pelotasarbol:pelotasarbol CIERRACUENTO {: RESULT = "<FUNC>" + (String)id + "</FUNC><ARGUMENTS>" + (String)pelotasarbol + "</ARGUMENTS>"; :};
// Producción para los argumentos de funciones (pelotasarbol)
pelotasarbol ::= hojasarbol:arg_l {: RESULT = (String)arg_l; :}
       | {: RESULT = ""; :};
// Producción para listas de argumentos (hojasarbol)
hojasarbol ::= tamales:tamales PINO hojasarbol:arg_l {: RESULT = "<ARG>" + (String)tamales + "</ARG>" + (String)arg_l; :}
           | tamales:tamales {: RESULT = "<ARG>" + (String)tamales + "</ARG>";:};
// Producción para literales (adornos)
adornos ::= L_SANTACLAUS: l_char {: RESULT = "char=" + (String)l_char; :}
          | L_FATHERCHRISTMAS: l_int {: RESULT = "int=" + (String)l_int; :}
          | L_KRISKRINGLE: l_flt {: RESULT = "float=" + (String)l_flt; :}
          | L_SANNICOLAS: l_bool {: RESULT = "bool=" + (String)l_bool; :}
          | L_DEDMOROZ: l_str {: RESULT = "string=\"" + (String)l_str + "\""; :};