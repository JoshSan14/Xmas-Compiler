
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import SymbolTable.*;
import Utils.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\003\000\002\007" +
    "\003\000\002\007\004\000\002\006\010\000\002\064\003" +
    "\000\002\064\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\062\004\000\002\063\005\000\002\063\006\000\002\012" +
    "\003\000\002\012\005\000\002\012\002\000\002\013\003" +
    "\000\002\003\005\000\002\003\003\000\002\017\004\000" +
    "\002\017\004\000\002\014\003\000\002\014\003\000\002" +
    "\065\005\000\002\010\004\000\002\015\003\000\002\015" +
    "\003\000\002\066\007\000\002\011\004\000\002\037\003" +
    "\000\002\037\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\026\004\000\002\026" +
    "\002\000\002\020\004\000\002\020\003\000\002\021\006" +
    "\000\002\022\003\000\002\022\003\000\002\027\010\000" +
    "\002\031\010\000\002\031\004\000\002\031\002\000\002" +
    "\030\003\000\002\030\003\000\002\032\011\000\002\033" +
    "\013\000\002\033\012\000\002\023\004\000\002\023\004" +
    "\000\002\035\006\000\002\034\006\000\002\024\004\000" +
    "\002\025\004\000\002\036\005\000\002\036\003\000\002" +
    "\040\005\000\002\040\003\000\002\041\004\000\002\041" +
    "\003\000\002\042\005\000\002\042\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\044\005\000\002" +
    "\044\003\000\002\045\003\000\002\045\003\000\002\046" +
    "\005\000\002\046\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\050\005\000\002\050\003\000" +
    "\002\051\004\000\002\051\003\000\002\052\003\000\002" +
    "\052\003\000\002\053\003\000\002\053\003\000\002\054" +
    "\003\000\002\054\006\000\002\055\005\000\002\055\003" +
    "\000\002\055\003\000\002\056\006\000\002\057\003\000" +
    "\002\057\002\000\002\060\005\000\002\060\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\064\006\001\002\000\004\002\300\001" +
    "\002\000\004\002\000\001\002\000\014\026\021\027\013" +
    "\030\014\031\016\032\011\001\002\000\006\002\uffff\064" +
    "\006\001\002\000\004\002\ufffe\001\002\000\004\062\ufff7" +
    "\001\002\000\004\040\123\001\002\000\004\062\ufffa\001" +
    "\002\000\004\062\ufff9\001\002\000\004\062\122\001\002" +
    "\000\004\062\ufff6\001\002\000\010\004\ufffb\040\ufffb\041" +
    "\ufffb\001\002\000\012\004\ufffc\040\ufffc\041\ufffc\042\022" +
    "\001\002\000\004\062\ufff8\001\002\000\030\013\053\014" +
    "\052\025\045\033\035\034\027\035\024\036\040\037\043" +
    "\040\026\043\031\062\037\001\002\000\046\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\041\uffa5\043\uffa5\060\uffa5\001\002\000\046\004\uff98" +
    "\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\015" +
    "\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98" +
    "\024\uff98\041\uff98\043\uff98\060\uff98\001\002\000\046\004" +
    "\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\024\uffa6\041\uffa6\043\uffa6\060\uffa6\001\002\000\026" +
    "\013\053\014\052\025\045\033\035\034\027\035\024\036" +
    "\040\037\043\040\026\062\037\001\002\000\046\004\uff99" +
    "\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\015" +
    "\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99" +
    "\024\uff99\041\uff99\043\uff99\060\uff99\001\002\000\014\004" +
    "\uffc2\024\116\041\uffc2\043\uffc2\060\uffc2\001\002\000\014" +
    "\004\ufff4\040\ufff4\041\ufff4\060\ufff4\061\ufff4\001\002\000" +
    "\016\004\uffbe\023\uffbe\024\uffbe\041\uffbe\043\uffbe\060\uffbe" +
    "\001\002\000\046\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\023\uffa1\024\uffa1\041\uffa1\043\uffa1\060" +
    "\uffa1\001\002\000\036\004\uffb4\005\112\006\114\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\041\uffb4\043\uffb4\060\uffb4\001\002\000\046\004\uff9a" +
    "\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\015" +
    "\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\041\uff9a\043\uff9a\060\uff9a\001\002\000\016\004" +
    "\uffc0\023\110\024\uffc0\041\uffc0\043\uffc0\060\uffc0\001\002" +
    "\000\054\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011" +
    "\uffa4\012\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\040\077\041\uffa4\042\076\043" +
    "\uffa4\060\uffa4\061\uffa4\001\002\000\046\004\uff97\005\uff97" +
    "\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\015\uff97\016" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97" +
    "\041\uff97\043\uff97\060\uff97\001\002\000\046\004\uffab\005" +
    "\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\074\015\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024" +
    "\uffab\041\uffab\043\uffab\060\uffab\001\002\000\032\004\uffbc" +
    "\015\066\016\067\017\070\020\064\021\072\022\071\023" +
    "\uffbc\024\uffbc\041\uffbc\043\uffbc\060\uffbc\001\002\000\046" +
    "\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012" +
    "\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96" +
    "\023\uff96\024\uff96\041\uff96\043\uff96\060\uff96\001\002\000" +
    "\044\004\uffb0\005\uffb0\006\uffb0\007\057\010\060\011\062" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\041\uffb0\043\uffb0\060\uffb0\001\002\000\024" +
    "\013\053\014\052\033\035\034\027\035\024\036\040\037" +
    "\043\040\026\062\037\001\002\000\046\004\uffa0\005\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\015\uffa0\016" +
    "\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\041\uffa0\043\uffa0\060\uffa0\001\002\000\004\043\055\001" +
    "\002\000\024\013\053\014\052\033\035\034\027\035\024" +
    "\036\040\037\043\040\026\062\037\001\002\000\046\004" +
    "\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023" +
    "\uffa9\024\uffa9\041\uffa9\043\uffa9\060\uffa9\001\002\000\024" +
    "\013\uffa7\014\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\062\uffa7\001\002\000\024\013\uffa8\014\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\062" +
    "\uffa8\001\002\000\046\004\uffaa\005\uffaa\006\uffaa\007\uffaa" +
    "\010\uffaa\011\uffaa\012\uffaa\015\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\041\uffaa\043\uffaa" +
    "\060\uffaa\001\002\000\014\004\ufff3\040\ufff3\041\ufff3\060" +
    "\ufff3\061\ufff3\001\002\000\016\004\uffbf\023\uffbf\024\uffbf" +
    "\041\uffbf\043\uffbf\060\uffbf\001\002\000\024\013\uffaf\014" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\062\uffaf\001\002\000\024\013\uffae\014\uffae\033\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\062\uffae\001\002" +
    "\000\024\013\053\014\052\033\035\034\027\035\024\036" +
    "\040\037\043\040\026\062\037\001\002\000\024\013\uffad" +
    "\014\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040" +
    "\uffad\062\uffad\001\002\000\036\004\uffb1\005\uffb1\006\uffb1" +
    "\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\041\uffb1\043\uffb1\060\uffb1\001\002\000\024" +
    "\013\uffb8\014\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\062\uffb8\001\002\000\024\013\053\014\052" +
    "\033\035\034\027\035\024\036\040\037\043\040\026\062" +
    "\037\001\002\000\024\013\uffbb\014\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\062\uffbb\001\002\000" +
    "\024\013\uffba\014\uffba\033\uffba\034\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\062\uffba\001\002\000\024\013\uffb9\014" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\062\uffb9\001\002\000\024\013\uffb6\014\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\062\uffb6\001\002" +
    "\000\024\013\uffb7\014\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\062\uffb7\001\002\000\016\004\uffbd" +
    "\023\uffbd\024\uffbd\041\uffbd\043\uffbd\060\uffbd\001\002\000" +
    "\024\013\053\014\052\033\035\034\027\035\024\036\040" +
    "\037\043\040\026\062\037\001\002\000\044\004\uffac\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\015\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\041" +
    "\uffac\043\uffac\060\uffac\001\002\000\026\013\053\014\052" +
    "\025\045\033\035\034\027\035\024\036\040\037\043\040" +
    "\026\062\037\001\002\000\030\013\053\014\052\025\045" +
    "\033\035\034\027\035\024\036\040\037\043\040\026\041" +
    "\uff9d\062\037\001\002\000\004\041\uff9e\001\002\000\004" +
    "\041\105\001\002\000\006\004\103\041\uff9b\001\002\000" +
    "\026\013\053\014\052\025\045\033\035\034\027\035\024" +
    "\036\040\037\043\040\026\062\037\001\002\000\004\041" +
    "\uff9c\001\002\000\046\004\uff9f\005\uff9f\006\uff9f\007\uff9f" +
    "\010\uff9f\011\uff9f\012\uff9f\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\041\uff9f\043\uff9f" +
    "\060\uff9f\001\002\000\004\043\107\001\002\000\050\004" +
    "\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\024\uffa3\041\uffa3\043\uffa3\060\uffa3\061\uffa3\001\002" +
    "\000\026\013\053\014\052\025\045\033\035\034\027\035" +
    "\024\036\040\037\043\040\026\062\037\001\002\000\014" +
    "\004\uffc1\024\uffc1\041\uffc1\043\uffc1\060\uffc1\001\002\000" +
    "\024\013\uffb3\014\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\062\uffb3\001\002\000\024\013\053\014" +
    "\052\033\035\034\027\035\024\036\040\037\043\040\026" +
    "\062\037\001\002\000\024\013\uffb2\014\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\062\uffb2\001\002" +
    "\000\032\004\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\041\uffb5\043\uffb5\060\uffb5" +
    "\001\002\000\026\013\053\014\052\025\045\033\035\034" +
    "\027\035\024\036\040\037\043\040\026\062\037\001\002" +
    "\000\012\004\uffc3\041\uffc3\043\uffc3\060\uffc3\001\002\000" +
    "\004\041\121\001\002\000\046\004\uffa2\005\uffa2\006\uffa2" +
    "\007\uffa2\010\uffa2\011\uffa2\012\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\041\uffa2" +
    "\043\uffa2\060\uffa2\001\002\000\016\004\ufff5\040\ufff5\041" +
    "\ufff5\042\ufff5\060\ufff5\061\ufff5\001\002\000\016\026\021" +
    "\027\013\030\014\031\016\032\011\041\ufff0\001\002\000" +
    "\006\004\uffef\041\uffef\001\002\000\006\004\276\041\ufff2" +
    "\001\002\000\004\041\127\001\002\000\006\003\131\044" +
    "\132\001\002\000\006\002\ufffd\064\ufffd\001\002\000\064" +
    "\002\uffed\013\uffed\014\uffed\025\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\037\uffed\040\uffed\045\uffed\046\uffed\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056" +
    "\uffed\057\uffed\060\uffed\062\uffed\063\uffed\064\uffed\001\002" +
    "\000\052\013\053\014\052\025\045\033\035\034\027\035" +
    "\024\036\040\037\043\040\026\045\uffd8\046\165\051\146" +
    "\052\145\054\157\055\147\056\143\057\152\060\137\062" +
    "\037\063\166\001\002\000\052\013\uffd4\014\uffd4\025\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\045" +
    "\uffd4\046\uffd4\051\uffd4\052\uffd4\054\uffd4\055\uffd4\056\uffd4" +
    "\057\uffd4\060\uffd4\062\uffd4\063\uffd4\001\002\000\006\060" +
    "\uffe5\061\267\001\002\000\052\013\uffdc\014\uffdc\025\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\045" +
    "\uffdc\046\uffdc\051\uffdc\052\uffdc\054\uffdc\055\uffdc\056\uffdc" +
    "\057\uffdc\060\uffdc\062\uffdc\063\uffdc\001\002\000\004\060" +
    "\uffe6\001\002\000\052\013\uffd6\014\uffd6\025\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\045\uffd6\046" +
    "\uffd6\051\uffd6\052\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\062\uffd6\063\uffd6\001\002\000\052\013\uffdf\014" +
    "\uffdf\025\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\045\uffdf\046\uffdf\051\uffdf\052\uffdf\054\uffdf\055" +
    "\uffdf\056\uffdf\057\uffdf\060\uffdf\062\uffdf\063\uffdf\001\002" +
    "\000\042\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012" +
    "\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\023\uffa5\024\uffa5\060\uffa5\061\252\001\002\000\004\060" +
    "\266\001\002\000\004\040\263\001\002\000\052\013\uffd3" +
    "\014\uffd3\025\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\045\uffd3\046\uffd3\051\uffd3\052\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\060\uffd3\062\uffd3\063\uffd3\001" +
    "\002\000\006\003\131\044\132\001\002\000\004\040\227" +
    "\001\002\000\004\060\226\001\002\000\052\013\uffcd\014" +
    "\uffcd\025\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\045\uffcd\046\uffcd\051\uffcd\052\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\062\uffcd\063\uffcd\001\002" +
    "\000\052\013\uffe0\014\uffe0\025\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\045\uffe0\046\uffe0\051\uffe0" +
    "\052\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\062" +
    "\uffe0\063\uffe0\001\002\000\004\040\223\001\002\000\052" +
    "\013\uffda\014\uffda\025\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\045\uffda\046\uffda\051\uffda\052\uffda" +
    "\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\062\uffda\063" +
    "\uffda\001\002\000\052\013\uffdd\014\uffdd\025\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\045\uffdd\046" +
    "\uffdd\051\uffdd\052\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd" +
    "\060\uffdd\062\uffdd\063\uffdd\001\002\000\004\060\222\001" +
    "\002\000\004\060\221\001\002\000\030\013\053\014\052" +
    "\025\045\033\035\034\027\035\024\036\040\037\043\040" +
    "\026\060\137\062\037\001\002\000\052\013\uffde\014\uffde" +
    "\025\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\045\uffde\046\uffde\051\uffde\052\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\062\uffde\063\uffde\001\002\000" +
    "\004\060\uffea\001\002\000\052\013\uffce\014\uffce\025\uffce" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\045" +
    "\uffce\046\uffce\051\uffce\052\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\uffce\060\uffce\062\uffce\063\uffce\001\002\000\004\060" +
    "\217\001\002\000\004\060\216\001\002\000\004\040\201" +
    "\001\002\000\014\026\021\027\013\030\014\031\016\032" +
    "\011\001\002\000\052\013\uffdb\014\uffdb\025\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\045\uffdb\046" +
    "\uffdb\051\uffdb\052\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\062\uffdb\063\uffdb\001\002\000\052\013\053\014" +
    "\052\025\045\033\035\034\027\035\024\036\040\037\043" +
    "\040\026\045\uffd8\046\165\051\146\052\145\054\157\055" +
    "\147\056\143\057\152\060\137\062\037\063\166\001\002" +
    "\000\004\045\175\001\002\000\006\060\uffe9\061\173\001" +
    "\002\000\026\013\053\014\052\025\045\033\035\034\027" +
    "\035\024\036\040\037\043\040\026\062\037\001\002\000" +
    "\004\060\uffe8\001\002\000\064\002\uffee\013\uffee\014\uffee" +
    "\025\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee" +
    "\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\062" +
    "\uffee\063\uffee\064\uffee\001\002\000\004\045\uffd9\001\002" +
    "\000\006\060\uffe3\061\uffe3\001\002\000\010\042\022\060" +
    "\uffe7\061\uffe7\001\002\000\026\013\053\014\052\025\045" +
    "\033\035\034\027\035\024\036\040\037\043\040\026\062" +
    "\037\001\002\000\004\041\203\001\002\000\006\003\131" +
    "\044\132\001\002\000\056\013\uffcf\014\uffcf\025\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\045\uffcf" +
    "\046\uffcf\047\206\050\205\051\uffcf\052\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\062\uffcf\063\uffcf\001\002" +
    "\000\006\003\131\044\132\001\002\000\004\040\210\001" +
    "\002\000\052\013\uffd2\014\uffd2\025\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\040\uffd2\045\uffd2\046\uffd2\051" +
    "\uffd2\052\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2" +
    "\062\uffd2\063\uffd2\001\002\000\026\013\053\014\052\025" +
    "\045\033\035\034\027\035\024\036\040\037\043\040\026" +
    "\062\037\001\002\000\004\041\212\001\002\000\006\003" +
    "\131\044\132\001\002\000\056\013\uffcf\014\uffcf\025\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\045" +
    "\uffcf\046\uffcf\047\206\050\205\051\uffcf\052\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\062\uffcf\063\uffcf\001" +
    "\002\000\052\013\uffd1\014\uffd1\025\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\045\uffd1\046\uffd1\051" +
    "\uffd1\052\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\062\uffd1\063\uffd1\001\002\000\052\013\uffd0\014\uffd0\025" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\045\uffd0\046\uffd0\051\uffd0\052\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\057\uffd0\060\uffd0\062\uffd0\063\uffd0\001\002\000\052" +
    "\013\uffeb\014\uffeb\025\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\045\uffeb\046\uffeb\051\uffeb\052\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\062\uffeb\063" +
    "\uffeb\001\002\000\052\013\uffc8\014\uffc8\025\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\045\uffc8\046" +
    "\uffc8\051\uffc8\052\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\062\uffc8\063\uffc8\001\002\000\052\013\uffc5\014" +
    "\uffc5\025\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\045\uffc5\046\uffc5\051\uffc5\052\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\060\uffc5\062\uffc5\063\uffc5\001\002" +
    "\000\052\013\uffd7\014\uffd7\025\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\045\uffd7\046\uffd7\051\uffd7" +
    "\052\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\062" +
    "\uffd7\063\uffd7\001\002\000\052\013\uffc9\014\uffc9\025\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\045" +
    "\uffc9\046\uffc9\051\uffc9\052\uffc9\054\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\060\uffc9\062\uffc9\063\uffc9\001\002\000\004\062" +
    "\224\001\002\000\004\041\225\001\002\000\004\060\uffc7" +
    "\001\002\000\052\013\uffc4\014\uffc4\025\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\045\uffc4\046\uffc4" +
    "\051\uffc4\052\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060" +
    "\uffc4\062\uffc4\063\uffc4\001\002\000\006\062\231\063\233" +
    "\001\002\000\004\061\173\001\002\000\006\042\076\061" +
    "\uffa4\001\002\000\004\061\252\001\002\000\014\026\021" +
    "\027\013\030\014\031\016\032\011\001\002\000\004\060" +
    "\243\001\002\000\026\013\053\014\052\025\045\033\035" +
    "\034\027\035\024\036\040\037\043\040\026\062\037\001" +
    "\002\000\004\060\237\001\002\000\026\013\053\014\052" +
    "\025\045\033\035\034\027\035\024\036\040\037\043\040" +
    "\026\062\037\001\002\000\004\041\241\001\002\000\006" +
    "\003\131\044\132\001\002\000\052\013\uffca\014\uffca\025" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\045\uffca\046\uffca\051\uffca\052\uffca\054\uffca\055\uffca\056" +
    "\uffca\057\uffca\060\uffca\062\uffca\063\uffca\001\002\000\026" +
    "\013\053\014\052\025\045\033\035\034\027\035\024\036" +
    "\040\037\043\040\026\062\037\001\002\000\004\060\245" +
    "\001\002\000\026\013\053\014\052\025\045\033\035\034" +
    "\027\035\024\036\040\037\043\040\026\062\037\001\002" +
    "\000\004\041\247\001\002\000\006\003\131\044\132\001" +
    "\002\000\052\013\uffcb\014\uffcb\025\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\045\uffcb\046\uffcb\051" +
    "\uffcb\052\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\062\uffcb\063\uffcb\001\002\000\004\061\uffe7\001\002\000" +
    "\026\013\053\014\052\025\045\033\035\034\027\035\024" +
    "\036\040\037\043\040\026\062\037\001\002\000\004\060" +
    "\254\001\002\000\052\013\uffd5\014\uffd5\025\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\045\uffd5\046" +
    "\uffd5\051\uffd5\052\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5" +
    "\060\uffd5\062\uffd5\063\uffd5\001\002\000\004\053\256\001" +
    "\002\000\004\040\257\001\002\000\026\013\053\014\052" +
    "\025\045\033\035\034\027\035\024\036\040\037\043\040" +
    "\026\062\037\001\002\000\004\041\261\001\002\000\004" +
    "\060\262\001\002\000\052\013\uffcc\014\uffcc\025\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\045\uffcc" +
    "\046\uffcc\051\uffcc\052\uffcc\054\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\062\uffcc\063\uffcc\001\002\000\026\013\053" +
    "\014\052\025\045\033\035\034\027\035\024\036\040\037" +
    "\043\040\026\062\037\001\002\000\004\041\265\001\002" +
    "\000\004\060\uffc6\001\002\000\052\013\uffec\014\uffec\025" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\045\uffec\046\uffec\051\uffec\052\uffec\054\uffec\055\uffec\056" +
    "\uffec\057\uffec\060\uffec\062\uffec\063\uffec\001\002\000\004" +
    "\042\270\001\002\000\026\013\053\014\052\025\045\033" +
    "\035\034\027\035\024\036\040\037\043\040\026\062\037" +
    "\001\002\000\004\043\275\001\002\000\006\004\273\043" +
    "\uffe2\001\002\000\026\013\053\014\052\025\045\033\035" +
    "\034\027\035\024\036\040\037\043\040\026\062\037\001" +
    "\002\000\004\043\uffe1\001\002\000\004\060\uffe4\001\002" +
    "\000\016\026\021\027\013\030\014\031\016\032\011\041" +
    "\ufff0\001\002\000\004\041\ufff1\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\010\002\003\006\006\007\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\014\062\017" +
    "\063\016\064\011\001\001\000\006\006\006\007\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\036\046\040\027\041\035\042\031\044" +
    "\041\046\033\050\043\051\040\052\047\053\050\054\022" +
    "\055\024\056\032\061\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\036\117\040\027" +
    "\041\035\042\031\044\041\046\033\050\043\051\040\052" +
    "\047\053\050\054\022\055\024\056\032\061\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\064\001\001" +
    "\000\002\001\001\000\004\047\060\001\001\000\030\042" +
    "\055\044\041\046\033\050\043\051\040\052\047\053\050" +
    "\054\022\055\024\056\032\061\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\051\053\052\047\053\050" +
    "\054\022\055\024\056\032\061\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\046\062\050\043\051\040\052\047" +
    "\053\050\054\022\055\024\056\032\061\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\042\072\044\041\046\033\050\043\051\040\052\047\053" +
    "\050\054\022\055\024\056\032\061\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\050\074" +
    "\051\040\052\047\053\050\054\022\055\024\056\032\061" +
    "\045\001\001\000\002\001\001\000\036\036\105\040\027" +
    "\041\035\042\031\044\041\046\033\050\043\051\040\052" +
    "\047\053\050\054\022\055\024\056\032\061\045\001\001" +
    "\000\042\036\101\040\027\041\035\042\031\044\041\046" +
    "\033\050\043\051\040\052\047\053\050\054\022\055\024" +
    "\056\032\057\100\060\077\061\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\036\101" +
    "\040\027\041\035\042\031\044\041\046\033\050\043\051" +
    "\040\052\047\053\050\054\022\055\024\056\032\060\103" +
    "\061\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\040\110\041\035" +
    "\042\031\044\041\046\033\050\043\051\040\052\047\053" +
    "\050\054\022\055\024\056\032\061\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\044\114\046\033\050" +
    "\043\051\040\052\047\053\050\054\022\055\024\056\032" +
    "\061\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\036\116\040\027\041\035\042\031\044\041\046\033" +
    "\050\043\051\040\052\047\053\050\054\022\055\024\056" +
    "\032\061\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\014\012" +
    "\125\013\124\062\017\063\016\064\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\110" +
    "\010\171\011\133\014\141\015\163\016\167\017\150\020" +
    "\137\021\157\022\153\023\134\024\166\025\152\026\170" +
    "\027\132\030\143\032\161\033\147\034\154\035\162\036" +
    "\155\040\027\041\035\042\031\044\041\046\033\050\043" +
    "\051\040\052\047\053\050\054\140\055\024\056\032\061" +
    "\045\065\160\066\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\020\217\036\155\040\027\041\035\042\031\044\041\046" +
    "\033\050\043\051\040\052\047\053\050\054\022\055\024" +
    "\056\032\061\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\014\062\177\063\176\001" +
    "\001\000\002\001\001\000\110\010\171\011\133\014\141" +
    "\015\163\016\167\017\150\020\137\021\157\022\153\023" +
    "\134\024\166\025\152\026\175\027\132\030\143\032\161" +
    "\033\147\034\154\035\162\036\155\040\027\041\035\042" +
    "\031\044\041\046\033\050\043\051\040\052\047\053\050" +
    "\054\140\055\024\056\032\061\045\065\160\066\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\036\173" +
    "\040\027\041\035\042\031\044\041\046\033\050\043\051" +
    "\040\052\047\053\050\054\022\055\024\056\032\061\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\036\201" +
    "\040\027\041\035\042\031\044\041\046\033\050\043\051" +
    "\040\052\047\053\050\054\022\055\024\056\032\061\045" +
    "\001\001\000\002\001\001\000\004\003\203\001\001\000" +
    "\004\031\206\001\001\000\004\003\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\036\210\040\027\041" +
    "\035\042\031\044\041\046\033\050\043\051\040\052\047" +
    "\053\050\054\022\055\024\056\032\061\045\001\001\000" +
    "\002\001\001\000\004\003\212\001\001\000\004\031\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\227\021\234" +
    "\054\231\065\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\014\062\250\001\001" +
    "\000\002\001\001\000\036\036\235\040\027\041\035\042" +
    "\031\044\041\046\033\050\043\051\040\052\047\053\050" +
    "\054\022\055\024\056\032\061\045\001\001\000\002\001" +
    "\001\000\036\036\237\040\027\041\035\042\031\044\041" +
    "\046\033\050\043\051\040\052\047\053\050\054\022\055" +
    "\024\056\032\061\045\001\001\000\002\001\001\000\004" +
    "\003\241\001\001\000\002\001\001\000\036\036\243\040" +
    "\027\041\035\042\031\044\041\046\033\050\043\051\040" +
    "\052\047\053\050\054\022\055\024\056\032\061\045\001" +
    "\001\000\002\001\001\000\036\036\245\040\027\041\035" +
    "\042\031\044\041\046\033\050\043\051\040\052\047\053" +
    "\050\054\022\055\024\056\032\061\045\001\001\000\002" +
    "\001\001\000\004\003\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\036\252\040\027\041\035\042\031" +
    "\044\041\046\033\050\043\051\040\052\047\053\050\054" +
    "\022\055\024\056\032\061\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\036\257\040\027\041\035\042\031\044\041\046\033" +
    "\050\043\051\040\052\047\053\050\054\022\055\024\056" +
    "\032\061\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\036\263\040\027\041\035\042" +
    "\031\044\041\046\033\050\043\051\040\052\047\053\050" +
    "\054\022\055\024\056\032\061\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\036\271\037\270\040\027\041\035\042\031\044" +
    "\041\046\033\050\043\051\040\052\047\053\050\054\022" +
    "\055\024\056\032\061\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\036\271\037\273\040\027\041\035" +
    "\042\031\044\041\046\033\050\043\051\040\052\047\053" +
    "\050\054\022\055\024\056\032\061\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\014\012\276\013" +
    "\124\062\017\063\016\064\123\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    // Connect this parser to a scanner!
    lexer lex;

    @SuppressWarnings("deprecation")
    public parser(lexer lex){
        this.lex=lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

    public final String ANSI_RESET = "\u001B[0m";
    public final String ANSI_RED = "\u001B[31m";

    // Metodo para reportar los errores sintacticos, pero funciona con ayuda de Recuperación en Modo Pánico + producciones de la gramatica
    public void syntax_error(Symbol s){
        System.out.println(Utils.ANSI_RED + "syntax_error: Error sintáctico '"+ s.value + "' en la línea: " + s.left + ", columna: " + s.right + Utils.ANSI_RESET);
    }

    // Metodo para reportar los errores irreparables
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println(Utils.ANSI_RED + "unrecovered_syntax_error: Error sintáctico inrecuperable '"+ s.value + "' en la línea: "+ s.left + ", columna: " + s.right + Utils.ANSI_RESET);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    private SymbolTableManager symTabMgr = new SymbolTableManager();
    private Map<String, TabSymbol> symbols = new HashMap<String, TabSymbol>();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= sacoderegalos 
            {
              Object RESULT =null;
		 symTabMgr.printAllTables(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sacoderegalos ::= confites 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sacoderegalos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sacoderegalos ::= confites sacoderegalos 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sacoderegalos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // confites ::= FUNCTION identifier ABRECUENTO trajesdesanta CIERRACUENTO caja 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                         RESULT = "function::" + (String)id;
                         Utils.splitAddFunc((String)RESULT, symbols, symTabMgr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("confites",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identifier ::= bolasdenavidad 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // identifier ::= bolsanavidena 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // personajedenavidad ::= FATHERCHRISTMAS 
            {
              Object RESULT =null;
		int t_intleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t_intright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t_int = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)t_int; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("personajedenavidad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // personajedenavidad ::= KRISKRINGLE 
            {
              Object RESULT =null;
		int t_fltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t_fltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t_flt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)t_flt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("personajedenavidad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // personajedenavidad ::= SANTACLAUS 
            {
              Object RESULT =null;
		int t_charleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t_charright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t_char = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)t_char; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("personajedenavidad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // personajedenavidad ::= DEDMOROZ 
            {
              Object RESULT =null;
		int t_strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t_strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t_str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)t_str; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("personajedenavidad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // personajedenavidad ::= SANNICOLAS 
            {
              Object RESULT =null;
		int t_boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t_boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t_bool = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)t_bool; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("personajedenavidad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bolasdenavidad ::= personajedenavidad PERSONA 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)tp + "::" + (String)id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolasdenavidad",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bolsanavidena ::= bolasdenavidad ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = (String)id + "::UND" ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bolsanavidena ::= bolasdenavidad ABREEMPAQUE tamales CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (String)id + "::" + (String)size; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // trajesdesanta ::= lucesdenavidad 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)par; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trajesdesanta",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // trajesdesanta ::= lucesdenavidad PINO trajesdesanta 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int par_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int par_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object par_l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)par + ", " + (String)par_l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trajesdesanta",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // trajesdesanta ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trajesdesanta",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lucesdenavidad ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "parameter::" + (String)id;
                           Utils.splitAddSym((String)RESULT, symbols); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lucesdenavidad",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // caja ::= ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caja",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // caja ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caja",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // jueguetes ::= barbadesanta FINREGALO 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "variable::" + (String)var;
                                             Utils.splitAddSym((String)RESULT, symbols); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jueguetes",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // jueguetes ::= regalo FINREGALO 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "array::" + (String)arr;
                                             Utils.splitAddArray((String)RESULT, symbols); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jueguetes",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // barbadesanta ::= carrito 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("barbadesanta",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // barbadesanta ::= portal 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("barbadesanta",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // carrito ::= portal ENTREGA tamales 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tamalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tamalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tamales = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)var + "::" + (String)tamales; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("carrito",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // portal ::= LOCAL bolasdenavidad 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("portal",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // regalo ::= decoracionnavidena 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)arr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // regalo ::= listadedeseos 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)arr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // decoracionnavidena ::= listadedeseos ENTREGA ABREEMPAQUE trineo CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expr_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expr_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr_l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (String)id + "::[" +(String)expr_l + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionnavidena",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listadedeseos ::= LOCAL bolsanavidena 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadedeseos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // trineo ::= tamales 
            {
              Object RESULT =null;
		int tamalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tamalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tamales = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)tamales; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trineo",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // trineo ::= tamales PINO trineo 
            {
              Object RESULT =null;
		int tamalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tamalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tamales = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr_l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)tamales + ", " + (String)expr_l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trineo",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // celebracionesnavidenas ::= jueguetes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("celebracionesnavidenas",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // celebracionesnavidenas ::= frio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("celebracionesnavidenas",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // celebracionesnavidenas ::= nieve 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("celebracionesnavidenas",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // celebracionesnavidenas ::= carta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("celebracionesnavidenas",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // celebracionesnavidenas ::= contarhistorianavidena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("celebracionesnavidenas",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // celebracionesnavidenas ::= nochebuena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("celebracionesnavidenas",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // celebracionesnavidenas ::= amigosecreto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("celebracionesnavidenas",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // villancicos ::= celebracionesnavidenas villancicos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // villancicos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // frio ::= tamales FINREGALO 
            {
              Object RESULT =null;
		int tamalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tamalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tamales = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = tamales; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("frio",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // frio ::= FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("frio",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // nieve ::= romperregalo ENTREGA tamales FINREGALO 
            {
              Object RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object mut = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tamalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tamalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tamales = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (String)mut + "<=" + (String)tamales ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nieve",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // carta ::= observarregalos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("carta",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // carta ::= peliculanavidena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("carta",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // observarregalos ::= ELFO ABRECUENTO tamales CIERRACUENTO caja papelderegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("observarregalos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // papelderegalo ::= HADA ABRECUENTO tamales CIERRACUENTO caja papelderegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("papelderegalo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // papelderegalo ::= DUENDE caja 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("papelderegalo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // papelderegalo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("papelderegalo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // peliculanavidena ::= familia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("peliculanavidena",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // peliculanavidena ::= regalomanual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("peliculanavidena",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // familia ::= HACE caja REVISA ABRECUENTO tamales CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("familia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // regalomanual ::= ENVUELVE ABRECUENTO carrito FINREGALO tamales FINREGALO tamales CIERRACUENTO caja 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalomanual",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // regalomanual ::= ENVUELVE ABRECUENTO nieve tamales FINREGALO tamales CIERRACUENTO caja 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalomanual",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contarhistorianavidena ::= leercarta FINREGALO 
            {
              Object RESULT =null;
		int celebracionesnavidenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int celebracionesnavidenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object celebracionesnavidenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = celebracionesnavidenas; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contarhistorianavidena",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contarhistorianavidena ::= escribircarta FINREGALO 
            {
              Object RESULT =null;
		int celebracionesnavidenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int celebracionesnavidenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object celebracionesnavidenas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = celebracionesnavidenas; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contarhistorianavidena",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // escribircarta ::= ESCUCHA ABRECUENTO PERSONA CIERRACUENTO 
            {
              Object RESULT =null;
		int wrtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wrtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object wrt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (String)wrt + "(" + (String)id + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribircarta",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // leercarta ::= NARRA ABRECUENTO tamales CIERRACUENTO 
            {
              Object RESULT =null;
		int prntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object prnt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tamalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tamalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tamales = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (String)prnt + "(" + (String)tamales + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("leercarta",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // nochebuena ::= ENVIA frio 
            {
              Object RESULT =null;
		int rtrnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rtrnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rtrn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int frioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int frioright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object frio = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)rtrn + (String)frio; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nochebuena",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // amigosecreto ::= CORTA FINREGALO 
            {
              Object RESULT =null;
		int brkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int brkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object brk = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (String)brk; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("amigosecreto",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tamales ::= regaloprin GASPAR tamales 
            {
              Object RESULT =null;
		int an_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int an_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object an_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tamalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tamalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tamales = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)an_expr + (String)sym + (String)tamales; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tamales ::= regaloprin 
            {
              Object RESULT =null;
		int an_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int an_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object an_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)an_expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // regaloprin ::= alegria MELCHOR regaloprin 
            {
              Object RESULT =null;
		int no_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int no_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object no_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int an_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int an_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object an_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)no_expr + (String)sym + (String)an_expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // regaloprin ::= alegria 
            {
              Object RESULT =null;
		int no_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int no_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object no_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)no_expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // alegria ::= BALTAZAR galletas 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int re_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int re_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object re_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)sym + (String)re_expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alegria",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // alegria ::= galletas 
            {
              Object RESULT =null;
		int re_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int re_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object re_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)re_expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alegria",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // galletas ::= juegos dulces galletas 
            {
              Object RESULT =null;
		int as_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int as_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object as_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int re_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int re_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object re_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)as_expr + (String)sym + (String)re_expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("galletas",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // galletas ::= juegos 
            {
              Object RESULT =null;
		int as_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int as_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object as_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)as_expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("galletas",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dulces ::= ALABASTER 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)sym; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dulces",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dulces ::= BUSHY 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)sym; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dulces",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dulces ::= PEPPER 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)sym; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dulces",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dulces ::= SUGARPLUM 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)sym; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dulces",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dulces ::= WUNORSE 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)sym; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dulces",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // dulces ::= JINGLE 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)sym; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dulces",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // juegos ::= sobre jueguetenuevo juegos 
            {
              Object RESULT =null;
		int md_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int md_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object md_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int as_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int as_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object as_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)md_expr + (String)sym + (String)as_expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("juegos",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // juegos ::= sobre 
            {
              Object RESULT =null;
		int md_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int md_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object md_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)md_expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("juegos",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // jueguetenuevo ::= DASHER 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)sym; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jueguetenuevo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // jueguetenuevo ::= DANCER 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)sym; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jueguetenuevo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sobre ::= estrella campanas sobre 
            {
              Object RESULT =null;
		int ex_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ex_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int md_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int md_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object md_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)ex_expr + (String)sym + (String)md_expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sobre",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sobre ::= estrella 
            {
              Object RESULT =null;
		int ex_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)ex_expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sobre",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // campanas ::= PRANCER 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)sym; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campanas",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // campanas ::= VIXEN 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)sym; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campanas",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // campanas ::= COMET 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)sym; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campanas",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // estrella ::= juguetesenelarbol RUDOLPH estrella 
            {
              Object RESULT =null;
		int un_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int un_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object un_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)un_expr + (String)sym + (String)ex_expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estrella",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // estrella ::= juguetesenelarbol 
            {
              Object RESULT =null;
		int un_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int un_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object un_expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)un_expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estrella",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // juguetesenelarbol ::= regalocomprado juguetesenelarbol 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int un_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int un_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object un_exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)sym + (String)un_exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("juguetesenelarbol",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // juguetesenelarbol ::= cenafamiliar 
            {
              Object RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)fact; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("juguetesenelarbol",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // regalocomprado ::= GRINCH 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)sym; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalocomprado",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // regalocomprado ::= QUIEN 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)sym; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalocomprado",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cenafamiliar ::= tiendadejuguetes 
            {
              Object RESULT =null;
		int immutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int immutright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object immut = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)immut; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cenafamiliar",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cenafamiliar ::= romperregalo 
            {
              Object RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mut = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)mut; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cenafamiliar",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // romperregalo ::= PERSONA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "id=" + (String)id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("romperregalo",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // romperregalo ::= PERSONA ABREEMPAQUE tamales CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tamalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tamalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tamales = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "id=" + (String)id + "[" + (String)tamales + "]" ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("romperregalo",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tiendadejuguetes ::= ABRECUENTO tamales CIERRACUENTO 
            {
              Object RESULT =null;
		int tamalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tamalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tamales = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "(" + (String)tamales + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiendadejuguetes",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tiendadejuguetes ::= devolverregalo 
            {
              Object RESULT =null;
		int devolverregaloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int devolverregaloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object devolverregalo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)devolverregalo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiendadejuguetes",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tiendadejuguetes ::= adornos 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)lit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiendadejuguetes",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // devolverregalo ::= PERSONA ABRECUENTO pelotasarbol CIERRACUENTO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelotasarbolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelotasarbolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pelotasarbol = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (String)id + "(" + (String)pelotasarbol + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("devolverregalo",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // pelotasarbol ::= hojasarbol 
            {
              Object RESULT =null;
		int arg_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arg_l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)arg_l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pelotasarbol",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // pelotasarbol ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pelotasarbol",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // hojasarbol ::= tamales PINO hojasarbol 
            {
              Object RESULT =null;
		int tamalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tamalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tamales = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arg_l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)tamales + ", " + (String)arg_l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hojasarbol",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // hojasarbol ::= tamales 
            {
              Object RESULT =null;
		int tamalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tamalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tamales = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)tamales;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hojasarbol",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // adornos ::= L_SANTACLAUS 
            {
              Object RESULT =null;
		int l_charleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_charright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l_char = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "char=" + (String)l_char; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornos",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // adornos ::= L_FATHERCHRISTMAS 
            {
              Object RESULT =null;
		int l_intleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_intright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l_int = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "int=" + (String)l_int; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornos",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // adornos ::= L_KRISKRINGLE 
            {
              Object RESULT =null;
		int l_fltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_fltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l_flt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "float=" + (String)l_flt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornos",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // adornos ::= L_SANNICOLAS 
            {
              Object RESULT =null;
		int l_boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l_bool = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "bool=" + (String)l_bool; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornos",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // adornos ::= L_DEDMOROZ 
            {
              Object RESULT =null;
		int l_strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l_str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "string=" + (String)l_str; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornos",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
