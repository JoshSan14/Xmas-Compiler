
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\010\000\002\003" +
    "\005\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\004\000" +
    "\002\016\003\000\002\016\004\000\002\016\004\000\002" +
    "\006\011\000\002\011\003\000\002\011\005\000\002\011" +
    "\002\000\002\012\004\000\002\012\006\000\002\013\003" +
    "\000\002\013\005\000\002\007\005\000\002\014\003\000" +
    "\002\014\007\000\002\010\010\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\025\004" +
    "\000\002\025\002\000\002\017\004\000\002\017\003\000" +
    "\002\036\003\000\002\036\005\000\002\020\006\000\002" +
    "\021\004\000\002\021\004\000\002\026\010\000\002\030" +
    "\010\000\002\030\004\000\002\030\002\000\002\027\003" +
    "\000\002\027\003\000\002\031\011\000\002\032\014\000" +
    "\002\032\014\000\002\022\004\000\002\022\004\000\002" +
    "\033\006\000\002\034\006\000\002\023\004\000\002\024" +
    "\004\000\002\035\005\000\002\035\003\000\002\037\005" +
    "\000\002\037\003\000\002\040\004\000\002\040\003\000" +
    "\002\041\005\000\002\041\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\043\005\000\002\043\003" +
    "\000\002\044\003\000\002\044\003\000\002\045\005\000" +
    "\002\045\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\047\005\000\002\047\003\000\002\050" +
    "\004\000\002\050\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\052\003\000\002\052\003\000" +
    "\002\053\003\000\002\053\006\000\002\054\005\000\002" +
    "\054\003\000\002\054\003\000\002\055\006\000\002\056" +
    "\003\000\002\056\002\000\002\057\005\000\002\057\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\064\005\001\002\000\004\002\307\001" +
    "\002\000\004\027\006\001\002\000\004\065\007\001\002" +
    "\000\004\040\010\001\002\000\004\041\011\001\002\000" +
    "\004\044\012\001\002\000\056\006\uffe1\013\uffe1\014\uffe1" +
    "\025\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\045\uffe1\046\uffe1\051\uffe1\052\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\062\uffe1\063\uffe1\064\uffe1\001" +
    "\002\000\004\002\000\001\002\000\056\006\024\013\045" +
    "\014\100\025\063\033\101\034\017\035\057\036\052\037" +
    "\102\040\054\045\032\046\067\051\043\052\042\054\060" +
    "\055\047\056\041\057\055\060\022\062\023\063\071\064" +
    "\016\001\002\000\046\004\uffa7\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\015\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\041\uffa7\043\uffa7" +
    "\060\uffa7\001\002\000\014\026\135\027\235\030\137\031" +
    "\140\032\132\001\002\000\046\004\uff9f\005\uff9f\006\uff9f" +
    "\007\uff9f\010\uff9f\011\uff9f\012\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\041\uff9f" +
    "\043\uff9f\060\uff9f\001\002\000\042\005\uffab\006\uffab\007" +
    "\uffab\010\uffab\011\uffab\012\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\060\uffab\061" +
    "\236\001\002\000\026\006\024\013\045\014\100\033\101" +
    "\034\017\035\057\036\052\037\102\040\054\062\023\001" +
    "\002\000\056\006\uffdf\013\uffdf\014\uffdf\025\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\045\uffdf\046" +
    "\uffdf\051\uffdf\052\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\060\uffdf\062\uffdf\063\uffdf\064\uffdf\001\002\000\054\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\040\262\041\uffaa\042\241\043\uffaa\060\uffaa" +
    "\061\uffaa\001\002\000\026\006\uffad\013\uffad\014\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\062\uffad" +
    "\001\002\000\004\060\uffd4\001\002\000\046\004\uffa6\005" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\015\uffa6" +
    "\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024" +
    "\uffa6\041\uffa6\043\uffa6\060\uffa6\001\002\000\006\060\uffef" +
    "\061\260\001\002\000\004\060\257\001\002\000\056\006" +
    "\uffe6\013\uffe6\014\uffe6\025\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\045\uffe6\046\uffe6\051\uffe6\052" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\062\uffe6" +
    "\063\uffe6\064\uffe6\001\002\000\066\002\uffff\006\uffff\013" +
    "\uffff\014\uffff\025\uffff\033\uffff\034\uffff\035\uffff\036\uffff" +
    "\037\uffff\040\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051" +
    "\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff\057\uffff" +
    "\060\uffff\062\uffff\063\uffff\064\uffff\001\002\000\056\006" +
    "\uffe3\013\uffe3\014\uffe3\025\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\045\uffe3\046\uffe3\051\uffe3\052" +
    "\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\001\002\000\016\004\uffc9\023\151\024" +
    "\uffc9\041\uffc9\043\uffc9\060\uffc9\001\002\000\004\060\256" +
    "\001\002\000\004\060\255\001\002\000\046\004\uffac\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\015\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\041\uffac\043\uffac\060\uffac\001\002\000\056\006\uffe4" +
    "\013\uffe4\014\uffe4\025\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\045\uffe4\046\uffe4\051\uffe4\052\uffe4" +
    "\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\062\uffe4\063" +
    "\uffe4\064\uffe4\001\002\000\004\040\252\001\002\000\004" +
    "\044\012\001\002\000\004\040\211\001\002\000\046\004" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\041\uffb2\043\uffb2\060\uffb2\001\002\000\026" +
    "\006\uffaf\013\uffaf\014\uffaf\033\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\062\uffaf\001\002\000\056\006\uffe9" +
    "\013\uffe9\014\uffe9\025\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\045\uffe9\046\uffe9\051\uffe9\052\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\062\uffe9\063" +
    "\uffe9\064\uffe9\001\002\000\004\060\210\001\002\000\044" +
    "\004\uffbb\005\uffbb\006\uffbb\007\123\010\124\011\125\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\041\uffbb\043\uffbb\060\uffbb\001\002\000\056\006" +
    "\uffe8\013\uffe8\014\uffe8\025\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\045\uffe8\046\uffe8\051\uffe8\052" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\062\uffe8" +
    "\063\uffe8\064\uffe8\001\002\000\046\004\uff9d\005\uff9d\006" +
    "\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\015\uff9d\016\uff9d" +
    "\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\041" +
    "\uff9d\043\uff9d\060\uff9d\001\002\000\016\004\uffc7\023\uffc7" +
    "\024\uffc7\041\uffc7\043\uffc7\060\uffc7\001\002\000\030\006" +
    "\024\013\045\014\100\025\063\033\101\034\017\035\057" +
    "\036\052\037\102\040\054\062\023\001\002\000\004\040" +
    "\203\001\002\000\006\060\uffec\061\174\001\002\000\046" +
    "\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012" +
    "\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\024\uff9e\041\uff9e\043\uff9e\060\uff9e\001\002\000" +
    "\032\006\024\013\045\014\100\025\063\033\101\034\017" +
    "\035\057\036\052\037\102\040\054\060\022\062\023\001" +
    "\002\000\004\060\uffd5\001\002\000\016\004\uffc5\023\uffc5" +
    "\024\uffc5\041\uffc5\043\uffc5\060\uffc5\001\002\000\030\006" +
    "\024\013\045\014\100\025\063\033\101\034\017\035\057" +
    "\036\052\037\102\040\054\062\023\001\002\000\056\006" +
    "\uffe7\013\uffe7\014\uffe7\025\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\045\uffe7\046\uffe7\051\uffe7\052" +
    "\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\062\uffe7" +
    "\063\uffe7\064\uffe7\001\002\000\006\024\147\060\171\001" +
    "\002\000\046\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\127\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\041\uffb7\043\uffb7\060\uffb7" +
    "\001\002\000\004\040\154\001\002\000\004\060\153\001" +
    "\002\000\014\026\135\027\134\030\137\031\140\032\132" +
    "\001\002\000\036\004\uffc3\005\112\006\114\015\111\016" +
    "\110\017\113\020\115\021\116\022\106\023\uffc3\024\uffc3" +
    "\041\uffc3\043\uffc3\060\uffc3\001\002\000\056\006\ufff8\013" +
    "\ufff8\014\ufff8\025\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\045\ufff8\046\ufff8\051\ufff8\052\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\062\ufff8\063\ufff8" +
    "\064\ufff8\001\002\000\046\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\015\uffb0\016\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\041\uffb0\043" +
    "\uffb0\060\uffb0\001\002\000\004\060\105\001\002\000\004" +
    "\060\104\001\002\000\056\006\uffe5\013\uffe5\014\uffe5\025" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\045\uffe5\046\uffe5\051\uffe5\052\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\060\uffe5\062\uffe5\063\uffe5\064\uffe5\001\002" +
    "\000\026\006\uffae\013\uffae\014\uffae\033\uffae\034\uffae\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\062\uffae\001\002\000\046" +
    "\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\041\uffa0\043\uffa0\060\uffa0\001\002\000" +
    "\046\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c" +
    "\012\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\024\uff9c\041\uff9c\043\uff9c\060\uff9c\001\002" +
    "\000\056\006\uffe2\013\uffe2\014\uffe2\025\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\045\uffe2\046\uffe2" +
    "\051\uffe2\052\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\062\uffe2\063\uffe2\064\uffe2\001\002\000\056\006\uffda" +
    "\013\uffda\014\uffda\025\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\045\uffda\046\uffda\051\uffda\052\uffda" +
    "\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\062\uffda\063" +
    "\uffda\064\uffda\001\002\000\056\006\uffcf\013\uffcf\014\uffcf" +
    "\025\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\045\uffcf\046\uffcf\051\uffcf\052\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\057\uffcf\060\uffcf\062\uffcf\063\uffcf\064\uffcf\001" +
    "\002\000\026\006\uffbd\013\uffbd\014\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\062\uffbd\001\002\000" +
    "\026\006\024\013\045\014\100\033\101\034\017\035\057" +
    "\036\052\037\102\040\054\062\023\001\002\000\026\006" +
    "\uffc1\013\uffc1\014\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\062\uffc1\001\002\000\026\006\uffc2\013" +
    "\uffc2\014\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\062\uffc2\001\002\000\026\006\uffba\013\uffba\014" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\062\uffba\001\002\000\026\006\uffc0\013\uffc0\014\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\062\uffc0" +
    "\001\002\000\026\006\uffb9\013\uffb9\014\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\062\uffb9\001\002" +
    "\000\026\006\uffbf\013\uffbf\014\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\062\uffbf\001\002\000\026" +
    "\006\uffbe\013\uffbe\014\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\062\uffbe\001\002\000\026\006\024" +
    "\013\045\014\100\033\101\034\017\035\057\036\052\037" +
    "\102\040\054\062\023\001\002\000\044\004\uffbc\005\uffbc" +
    "\006\uffbc\007\123\010\124\011\125\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\041\uffbc" +
    "\043\uffbc\060\uffbc\001\002\000\046\004\uffab\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\015\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\041" +
    "\uffab\043\uffab\060\uffab\001\002\000\026\006\024\013\045" +
    "\014\100\033\101\034\017\035\057\036\052\037\102\040" +
    "\054\062\023\001\002\000\026\006\uffb6\013\uffb6\014\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\062" +
    "\uffb6\001\002\000\026\006\uffb5\013\uffb5\014\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\062\uffb5\001" +
    "\002\000\026\006\uffb4\013\uffb4\014\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\062\uffb4\001\002\000" +
    "\046\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\127\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\041\uffb8\043\uffb8\060\uffb8\001\002" +
    "\000\026\006\024\013\045\014\100\033\101\034\017\035" +
    "\057\036\052\037\102\040\054\062\023\001\002\000\046" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\041\uffb3\043\uffb3\060\uffb3\001\002\000" +
    "\022\004\uffc4\005\112\006\114\023\uffc4\024\uffc4\041\uffc4" +
    "\043\uffc4\060\uffc4\001\002\000\004\062\ufffb\001\002\000" +
    "\004\062\143\001\002\000\006\026\142\062\ufffe\001\002" +
    "\000\004\062\ufffc\001\002\000\004\062\141\001\002\000" +
    "\004\062\ufffd\001\002\000\004\062\ufffa\001\002\000\006" +
    "\060\uffed\061\uffed\001\002\000\004\062\ufff9\001\002\000" +
    "\004\042\144\001\002\000\030\006\024\013\045\014\100" +
    "\025\063\033\101\034\017\035\057\036\052\037\102\040" +
    "\054\062\023\001\002\000\006\024\147\043\146\001\002" +
    "\000\006\060\uffea\061\uffea\001\002\000\030\006\024\013" +
    "\045\014\100\025\063\033\101\034\017\035\057\036\052" +
    "\037\102\040\054\062\023\001\002\000\016\004\uffca\023" +
    "\151\024\uffca\041\uffca\043\uffca\060\uffca\001\002\000\030" +
    "\006\024\013\045\014\100\025\063\033\101\034\017\035" +
    "\057\036\052\037\102\040\054\062\023\001\002\000\016" +
    "\004\uffc8\023\uffc8\024\uffc8\041\uffc8\043\uffc8\060\uffc8\001" +
    "\002\000\056\006\ufff7\013\ufff7\014\ufff7\025\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\045\ufff7\046" +
    "\ufff7\051\ufff7\052\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7" +
    "\060\ufff7\062\ufff7\063\ufff7\064\ufff7\001\002\000\030\006" +
    "\024\013\045\014\100\025\063\033\101\034\017\035\057" +
    "\036\052\037\102\040\054\062\023\001\002\000\006\024" +
    "\147\041\156\001\002\000\004\044\012\001\002\000\010" +
    "\047\161\050\160\060\uffd6\001\002\000\004\044\012\001" +
    "\002\000\004\040\163\001\002\000\004\060\uffd9\001\002" +
    "\000\030\006\024\013\045\014\100\025\063\033\101\034" +
    "\017\035\057\036\052\037\102\040\054\062\023\001\002" +
    "\000\006\024\147\041\165\001\002\000\004\044\012\001" +
    "\002\000\010\047\161\050\160\060\uffd6\001\002\000\004" +
    "\060\uffd8\001\002\000\004\060\uffd7\001\002\000\056\006" +
    "\uffe0\013\uffe0\014\uffe0\025\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\045\uffe0\046\uffe0\051\uffe0\052" +
    "\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\001\002\000\016\004\uffc6\023\uffc6\024" +
    "\uffc6\041\uffc6\043\uffc6\060\uffc6\001\002\000\056\006\uffcc" +
    "\013\uffcc\014\uffcc\025\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\045\uffcc\046\uffcc\051\uffcc\052\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\062\uffcc\063" +
    "\uffcc\064\uffcc\001\002\000\004\042\175\001\002\000\030" +
    "\006\024\013\045\014\100\025\063\033\101\034\017\035" +
    "\057\036\052\037\102\040\054\062\023\001\002\000\010" +
    "\004\201\024\147\043\uffde\001\002\000\004\043\200\001" +
    "\002\000\004\060\uffeb\001\002\000\030\006\024\013\045" +
    "\014\100\025\063\033\101\034\017\035\057\036\052\037" +
    "\102\040\054\062\023\001\002\000\004\043\uffdd\001\002" +
    "\000\030\006\024\013\045\014\100\025\063\033\101\034" +
    "\017\035\057\036\052\037\102\040\054\062\023\001\002" +
    "\000\006\024\147\041\205\001\002\000\004\060\uffcd\001" +
    "\002\000\006\024\147\041\207\001\002\000\046\004\uffa8" +
    "\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\041\uffa8\043\uffa8\060\uffa8\001\002\000\056\006" +
    "\uffcb\013\uffcb\014\uffcb\025\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\045\uffcb\046\uffcb\051\uffcb\052" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\062\uffcb" +
    "\063\uffcb\064\uffcb\001\002\000\006\062\212\063\214\001" +
    "\002\000\006\042\241\061\uffaa\001\002\000\004\061\236" +
    "\001\002\000\014\026\135\027\235\030\137\031\140\032" +
    "\132\001\002\000\004\060\226\001\002\000\004\060\217" +
    "\001\002\000\030\006\024\013\045\014\100\025\063\033" +
    "\101\034\017\035\057\036\052\037\102\040\054\062\023" +
    "\001\002\000\006\024\147\060\221\001\002\000\030\006" +
    "\024\013\045\014\100\025\063\033\101\034\017\035\057" +
    "\036\052\037\102\040\054\062\023\001\002\000\006\024" +
    "\147\060\223\001\002\000\004\041\224\001\002\000\004" +
    "\044\012\001\002\000\004\060\uffd1\001\002\000\030\006" +
    "\024\013\045\014\100\025\063\033\101\034\017\035\057" +
    "\036\052\037\102\040\054\062\023\001\002\000\006\024" +
    "\147\060\230\001\002\000\030\006\024\013\045\014\100" +
    "\025\063\033\101\034\017\035\057\036\052\037\102\040" +
    "\054\062\023\001\002\000\006\024\147\060\232\001\002" +
    "\000\004\041\233\001\002\000\004\044\012\001\002\000" +
    "\004\060\uffd2\001\002\000\004\062\ufffe\001\002\000\030" +
    "\006\024\013\045\014\100\025\063\033\101\034\017\035" +
    "\057\036\052\037\102\040\054\062\023\001\002\000\006" +
    "\024\147\060\240\001\002\000\056\006\uffdc\013\uffdc\014" +
    "\uffdc\025\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\045\uffdc\046\uffdc\051\uffdc\052\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\057\uffdc\060\uffdc\062\uffdc\063\uffdc\064\uffdc" +
    "\001\002\000\030\006\024\013\045\014\100\025\063\033" +
    "\101\034\017\035\057\036\052\037\102\040\054\062\023" +
    "\001\002\000\006\024\147\043\243\001\002\000\050\004" +
    "\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023" +
    "\uffa9\024\uffa9\041\uffa9\043\uffa9\060\uffa9\061\uffa9\001\002" +
    "\000\004\053\245\001\002\000\004\040\246\001\002\000" +
    "\030\006\024\013\045\014\100\025\063\033\101\034\017" +
    "\035\057\036\052\037\102\040\054\062\023\001\002\000" +
    "\006\024\147\041\250\001\002\000\004\060\251\001\002" +
    "\000\004\060\uffd3\001\002\000\004\062\253\001\002\000" +
    "\004\041\254\001\002\000\004\060\uffce\001\002\000\056" +
    "\006\uffd0\013\uffd0\014\uffd0\025\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\045\uffd0\046\uffd0\051\uffd0" +
    "\052\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\062" +
    "\uffd0\063\uffd0\064\uffd0\001\002\000\056\006\ufff6\013\ufff6" +
    "\014\ufff6\025\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\045\ufff6\046\ufff6\051\ufff6\052\ufff6\054\ufff6" +
    "\055\ufff6\056\ufff6\057\ufff6\060\ufff6\062\ufff6\063\ufff6\064" +
    "\ufff6\001\002\000\056\006\uffdb\013\uffdb\014\uffdb\025\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\045" +
    "\uffdb\046\uffdb\051\uffdb\052\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\057\uffdb\060\uffdb\062\uffdb\063\uffdb\064\uffdb\001\002\000" +
    "\030\006\024\013\045\014\100\025\063\033\101\034\017" +
    "\035\057\036\052\037\102\040\054\062\023\001\002\000" +
    "\006\024\147\060\uffee\001\002\000\032\006\024\013\045" +
    "\014\100\025\063\033\101\034\017\035\057\036\052\037" +
    "\102\040\054\041\uffa3\062\023\001\002\000\010\004\uffa1" +
    "\024\147\041\uffa1\001\002\000\004\041\270\001\002\000" +
    "\006\004\266\041\uffa4\001\002\000\030\006\024\013\045" +
    "\014\100\025\063\033\101\034\017\035\057\036\052\037" +
    "\102\040\054\062\023\001\002\000\010\004\uffa2\024\147" +
    "\041\uffa2\001\002\000\046\004\uffa5\005\uffa5\006\uffa5\007" +
    "\uffa5\010\uffa5\011\uffa5\012\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\041\uffa5\043" +
    "\uffa5\060\uffa5\001\002\000\046\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\012\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\041\uffb1" +
    "\043\uffb1\060\uffb1\001\002\000\004\062\273\001\002\000" +
    "\004\040\274\001\002\000\016\026\135\027\235\030\137" +
    "\031\140\032\132\041\ufff2\001\002\000\004\041\305\001" +
    "\002\000\004\062\302\001\002\000\006\004\300\041\ufff4" +
    "\001\002\000\016\026\135\027\235\030\137\031\140\032" +
    "\132\041\ufff2\001\002\000\004\041\ufff3\001\002\000\010" +
    "\004\ufff1\041\ufff1\042\303\001\002\000\004\043\304\001" +
    "\002\000\006\004\ufff0\041\ufff0\001\002\000\004\044\012" +
    "\001\002\000\056\006\ufff5\013\ufff5\014\ufff5\025\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\045\ufff5" +
    "\046\ufff5\051\ufff5\052\ufff5\054\ufff5\055\ufff5\056\ufff5\057" +
    "\ufff5\060\ufff5\062\ufff5\063\ufff5\064\ufff5\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\012\001\001\000\004\025\013\001" +
    "\001\000\002\001\001\000\104\006\072\007\026\010\055" +
    "\013\067\014\034\015\102\016\045\017\050\020\063\021" +
    "\030\022\076\023\037\024\032\026\027\027\075\031\060" +
    "\032\024\033\035\034\074\035\064\037\033\040\052\041" +
    "\061\043\071\045\047\047\065\050\043\051\020\052\073" +
    "\053\017\054\036\055\014\060\025\001\001\000\002\001" +
    "\001\000\004\004\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\050\270\051\020\052\073\053\120\054" +
    "\036\055\014\060\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\035\205\037\033\040\052\041\061\043\071\045\047\047" +
    "\065\050\043\051\020\052\073\053\120\054\036\055\014" +
    "\060\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\017\172\035\064\037\033\040\052" +
    "\041\061\043\071\045\047\047\065\050\043\051\020\052" +
    "\073\053\120\054\036\055\014\060\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\040\171\041\061\043" +
    "\071\045\047\047\065\050\043\051\020\052\073\053\120" +
    "\054\036\055\014\060\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\135\005\132\001\001\000\006\042" +
    "\106\044\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\043\130\045\047\047\065\050\043\051\020" +
    "\052\073\053\120\054\036\055\014\060\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\045\117\047\065\050\043\051\020\052\073" +
    "\053\120\054\036\055\014\060\025\001\001\000\004\046" +
    "\121\001\001\000\002\001\001\000\022\047\125\050\043" +
    "\051\020\052\073\053\120\054\036\055\014\060\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\050\127\051\020\052\073\053" +
    "\120\054\036\055\014\060\025\001\001\000\002\001\001" +
    "\000\004\044\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\035\144\037\033" +
    "\040\052\041\061\043\071\045\047\047\065\050\043\051" +
    "\020\052\073\053\120\054\036\055\014\060\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\037\147\040" +
    "\052\041\061\043\071\045\047\047\065\050\043\051\020" +
    "\052\073\053\120\054\036\055\014\060\025\001\001\000" +
    "\002\001\001\000\032\040\151\041\061\043\071\045\047" +
    "\047\065\050\043\051\020\052\073\053\120\054\036\055" +
    "\014\060\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\035\154\037\033\040\052\041\061\043\071\045" +
    "\047\047\065\050\043\051\020\052\073\053\120\054\036" +
    "\055\014\060\025\001\001\000\002\001\001\000\004\003" +
    "\156\001\001\000\004\030\161\001\001\000\004\003\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\035" +
    "\163\037\033\040\052\041\061\043\071\045\047\047\065" +
    "\050\043\051\020\052\073\053\120\054\036\055\014\060" +
    "\025\001\001\000\002\001\001\000\004\003\165\001\001" +
    "\000\004\030\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\035\175\036\176\037\033\040" +
    "\052\041\061\043\071\045\047\047\065\050\043\051\020" +
    "\052\073\053\120\054\036\055\014\060\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\035\175\036\201\037\033\040\052\041\061\043\071\045" +
    "\047\047\065\050\043\051\020\052\073\053\120\054\036" +
    "\055\014\060\025\001\001\000\002\001\001\000\036\035" +
    "\203\037\033\040\052\041\061\043\071\045\047\047\065" +
    "\050\043\051\020\052\073\053\120\054\036\055\014\060" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\026\013\214\020\215\053\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\035\217\037\033\040\052" +
    "\041\061\043\071\045\047\047\065\050\043\051\020\052" +
    "\073\053\120\054\036\055\014\060\025\001\001\000\002" +
    "\001\001\000\036\035\221\037\033\040\052\041\061\043" +
    "\071\045\047\047\065\050\043\051\020\052\073\053\120" +
    "\054\036\055\014\060\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\224\001\001\000\002\001\001" +
    "\000\036\035\226\037\033\040\052\041\061\043\071\045" +
    "\047\047\065\050\043\051\020\052\073\053\120\054\036" +
    "\055\014\060\025\001\001\000\002\001\001\000\036\035" +
    "\230\037\033\040\052\041\061\043\071\045\047\047\065" +
    "\050\043\051\020\052\073\053\120\054\036\055\014\060" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\035\236\037\033\040\052\041\061\043\071\045\047" +
    "\047\065\050\043\051\020\052\073\053\120\054\036\055" +
    "\014\060\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\035\241\037\033\040\052\041\061\043\071\045" +
    "\047\047\065\050\043\051\020\052\073\053\120\054\036" +
    "\055\014\060\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\035\246" +
    "\037\033\040\052\041\061\043\071\045\047\047\065\050" +
    "\043\051\020\052\073\053\120\054\036\055\014\060\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\035\260\037\033\040\052\041\061\043\071\045\047" +
    "\047\065\050\043\051\020\052\073\053\120\054\036\055" +
    "\014\060\025\001\001\000\002\001\001\000\042\035\262" +
    "\037\033\040\052\041\061\043\071\045\047\047\065\050" +
    "\043\051\020\052\073\053\120\054\036\055\014\056\263" +
    "\057\264\060\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\035\266\037\033\040\052" +
    "\041\061\043\071\045\047\047\065\050\043\051\020\052" +
    "\073\053\120\054\036\055\014\060\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\275\011\274\012\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\275\011\300\012\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\305\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    // Connect this parser to a scanner!
    lexer lex;

    @SuppressWarnings("deprecation")
    public parser(lexer lex){
        this.lex=lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    public void hola() {
        System.out.println("hola");
    }
    public void adios() {
        System.out.println("adios");
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= FUNCTION FATHERCHRISTMAS MAIN ABRECUENTO CIERRACUENTO block 
            {
              Object RESULT =null;
		 System.out.println("NAVIDAD");; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= ABREREGALO stmt_list CIERRAREGALO 
            {
              Object RESULT =null;
		 System.out.println("BLOCK"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= FATHERCHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= KRISKRINGLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= SANTACLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= DEDMOROZ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= SANNICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arr_type ::= FATHERCHRISTMAS SANTACLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl_stmt ::= func_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl_stmt ::= var_decl_init FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decl_stmt ::= arr_decl_init FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func_decl ::= FUNCTION type PERSONA ABRECUENTO param_list CIERRACUENTO block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_list ::= param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_list ::= param PINO param_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= type PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param ::= type PERSONA ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_decl_init ::= var_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_init",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_decl_init ::= var_decl ENTREGA expr 
            {
              Object RESULT =null;
		 System.out.println("VARIABLE DECLARATION INIT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_init",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_decl ::= LOCAL type PERSONA 
            {
              Object RESULT =null;
		 System.out.println("VARIABLE DECLARATION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arr_decl_init ::= arr_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_decl_init",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arr_decl_init ::= arr_decl ENTREGA ABREEMPAQUE expr_list CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_decl_init",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arr_decl ::= LOCAL arr_type PERSONA ABREEMPAQUE expr CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= decl_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= expr_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= assg_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= ctrl_struct_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= input_output_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= break_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_stmt ::= expr FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_stmt ::= FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_list ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_list ::= expr PINO expr_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assg_stmt ::= mutable ENTREGA expr FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assg_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ctrl_struct_stmt ::= conditional_stmt FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctrl_struct_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ctrl_struct_stmt ::= iter_stmt FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctrl_struct_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // conditional_stmt ::= ELFO ABRECUENTO expr CIERRACUENTO block elif_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // elif_else ::= HADA ABRECUENTO expr CIERRACUENTO block elif_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // elif_else ::= DUENDE block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // elif_else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // iter_stmt ::= do_until_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iter_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // iter_stmt ::= for_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iter_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // do_until_loop ::= HACE block REVISA ABRECUENTO expr CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_until_loop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // for_loop ::= ENVUELVE ABRECUENTO var_decl_init FINREGALO expr FINREGALO expr FINREGALO CIERRACUENTO block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // for_loop ::= ENVUELVE ABRECUENTO assg_stmt FINREGALO expr FINREGALO expr FINREGALO CIERRACUENTO block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // input_output_stmt ::= read_stmt FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_output_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // input_output_stmt ::= write_stmt FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_output_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // read_stmt ::= NARRA ABRECUENTO PERSONA CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // write_stmt ::= ESCUCHA ABRECUENTO expr CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // return_stmt ::= ENVIA expr_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // break_stmt ::= CORTA FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr GASPAR and_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= and_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // and_expr ::= and_expr MELCHOR not_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // and_expr ::= not_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // not_expr ::= BALTAZAR not_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("not_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // not_expr ::= rel_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("not_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rel_expr ::= add_sub_expr rel_op add_sub_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rel_expr ::= add_sub_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rel_op ::= ALABASTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rel_op ::= BUSHY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // rel_op ::= PEPPER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // rel_op ::= SUGARPLUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // rel_op ::= WUNORSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // rel_op ::= JINGLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // add_sub_expr ::= add_sub_expr add_sub_ops mul_div_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_sub_expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // add_sub_expr ::= mul_div_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_sub_expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // add_sub_ops ::= DASHER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_sub_ops",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // add_sub_ops ::= DANCER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_sub_ops",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // mul_div_expr ::= mul_div_expr mul_div_ops exp_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_div_expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // mul_div_expr ::= exp_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_div_expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // mul_div_ops ::= PRANCER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_div_ops",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // mul_div_ops ::= VIXEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_div_ops",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // mul_div_ops ::= COMET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_div_ops",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exp_expr ::= exp_expr RUDOLPH un_arith_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exp_expr ::= un_arith_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_expr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // un_arith_expr ::= un_arith_ops un_arith_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("un_arith_expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // un_arith_expr ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("un_arith_expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // un_arith_ops ::= GRINCH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("un_arith_ops",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // un_arith_ops ::= QUIEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("un_arith_ops",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // un_arith_ops ::= DANCER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("un_arith_ops",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // factor ::= immutable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // factor ::= mutable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // mutable ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutable",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // mutable ::= PERSONA ABREEMPAQUE expr CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutable",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // immutable ::= ABRECUENTO expr CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("immutable",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // immutable ::= call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("immutable",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // immutable ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("immutable",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // call ::= PERSONA ABRECUENTO args CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // args ::= arg_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // args ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // arg_list ::= arg_list PINO expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // arg_list ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // literal ::= L_SANTACLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // literal ::= L_FATHERCHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // literal ::= L_KRISKRINGLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // literal ::= L_SANNICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // literal ::= L_DEDMOROZ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
